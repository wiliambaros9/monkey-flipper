// ==================== MONKEY FLIPPER 1V1 SERVER ====================
// Socket.IO —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–æ–º –∏ –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏

const express = require('express');
const http = require('http');
const socketIO = require('socket.io');
const cors = require('cors');

const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –∏ Socket.IO
app.use(cors());
app.use(express.json());

const io = socketIO(server, {
    cors: {
        origin: '*',
        methods: ['GET', 'POST']
    }
});

// ==================== DATA STRUCTURES ====================

// –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞
const matchmakingQueue = [];

// –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã { roomId: GameRoom }
const gameRooms = new Map();

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–æ–π
class GameRoom {
    constructor(player1, player2) {
        this.id = `room_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        this.seed = Math.floor(Math.random() * 1000000); // Seed –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
        this.players = {
            [player1.id]: {
                socketId: player1.socketId,
                userId: player1.userId,
                username: player1.username,
                x: 0,
                y: 0,
                isAlive: true,
                score: 0,
                lastUpdate: Date.now()
            },
            [player2.id]: {
                socketId: player2.socketId,
                userId: player2.userId,
                username: player2.username,
                x: 0,
                y: 0,
                isAlive: true,
                score: 0,
                lastUpdate: Date.now()
            }
        };
        this.startTime = null;
        this.duration = 120000; // 2 –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        this.status = 'countdown'; // countdown -> playing -> finished
        this.winner = null;
    }
    
    getPlayerIds() {
        return Object.keys(this.players);
    }
    
    getOpponent(playerId) {
        const playerIds = this.getPlayerIds();
        return playerIds.find(id => id !== playerId);
    }
    
    updatePlayer(playerId, data) {
        if (this.players[playerId]) {
            Object.assign(this.players[playerId], data);
            this.players[playerId].lastUpdate = Date.now();
        }
    }
    
    checkGameEnd() {
        const playerIds = this.getPlayerIds();
        const alivePlayers = playerIds.filter(id => this.players[id].isAlive);
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã:', {
            totalPlayers: playerIds.length,
            alivePlayers: alivePlayers.length,
            players: playerIds.map(id => ({
                id,
                isAlive: this.players[id].isAlive,
                score: this.players[id].score
            }))
        });
        
        // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–ø–∞–ª
        if (alivePlayers.length === 1) {
            this.winner = alivePlayers[0];
            this.status = 'finished';
            console.log('üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω (–æ–¥–∏–Ω –≤—ã–∂–∏–ª):', this.winner);
            return { reason: 'fall', winner: this.winner };
        }
        
        // –ï—Å–ª–∏ –æ–±–∞ —É–ø–∞–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ 500ms)
        if (alivePlayers.length === 0) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –≤—ã—Å–æ—Ç–µ
            const p1Id = playerIds[0];
            const p2Id = playerIds[1];
            this.winner = this.players[p1Id].score > this.players[p2Id].score ? p1Id : p2Id;
            this.status = 'finished';
            console.log('üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω (–æ–±–∞ —É–ø–∞–ª–∏, –≤—ã—à–µ –ø—Ä—ã–≥–Ω—É–ª):', this.winner);
            return { reason: 'double_fall', winner: this.winner };
        }
        
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
        if (this.startTime && Date.now() - this.startTime >= this.duration) {
            const p1Id = playerIds[0];
            const p2Id = playerIds[1];
            this.winner = this.players[p1Id].score > this.players[p2Id].score ? p1Id : p2Id;
            this.status = 'finished';
            return { reason: 'timeout', winner: this.winner };
        }
        
        return null;
    }
}

// ==================== HELPER FUNCTIONS ====================

function findPlayerInQueue(socketId) {
    return matchmakingQueue.findIndex(p => p.socketId === socketId);
}

function removePlayerFromQueue(socketId) {
    const index = findPlayerInQueue(socketId);
    if (index !== -1) {
        matchmakingQueue.splice(index, 1);
        console.log(`üö™ –ò–≥—Ä–æ–∫ ${socketId} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏. –û—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: ${matchmakingQueue.length}`);
    }
}

function findPlayerRoom(socketId) {
    for (const [roomId, room] of gameRooms.entries()) {
        const playerIds = room.getPlayerIds();
        for (const playerId of playerIds) {
            if (room.players[playerId].socketId === socketId) {
                return { room, playerId };
            }
        }
    }
    return null;
}

// ==================== SOCKET.IO EVENTS ====================

io.on('connection', (socket) => {
    console.log(`‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
    
    // ===== –ú–ê–¢–ß–ú–ï–ô–ö–ò–ù–ì =====
    socket.on('findMatch', (data) => {
        const { userId, username } = data;
        console.log(`üîç –ü–æ–∏—Å–∫ –º–∞—Ç—á–∞: ${username} (${userId})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
        if (findPlayerInQueue(socket.id) !== -1) {
            console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${socket.id} —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏`);
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        const player = {
            id: userId,
            socketId: socket.id,
            userId: userId,
            username: username,
            joinedAt: Date.now()
        };
        
        matchmakingQueue.push(player);
        console.log(`‚ûï –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å. –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: ${matchmakingQueue.length}`);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–∞—Ä—É
        if (matchmakingQueue.length >= 2) {
            const player1 = matchmakingQueue.shift();
            const player2 = matchmakingQueue.shift();
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
            const room = new GameRoom(player1, player2);
            gameRooms.set(room.id, room);
            
            console.log(`üéÆ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞: ${room.id}`);
            console.log(`   –ò–≥—Ä–æ–∫ 1: ${player1.username}`);
            console.log(`   –ò–≥—Ä–æ–∫ 2: ${player2.username}`);
            console.log(`   Seed: ${room.seed}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
            const gameStartData = {
                roomId: room.id,
                seed: room.seed,
                opponent: null // –ó–∞–ø–æ–ª–Ω–∏–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
            };
            
            // –ò–≥—Ä–æ–∫ 1
            io.to(player1.socketId).emit('gameStart', {
                ...gameStartData,
                opponent: {
                    id: player2.userId,
                    username: player2.username
                }
            });
            
            // –ò–≥—Ä–æ–∫ 2
            io.to(player2.socketId).emit('gameStart', {
                ...gameStartData,
                opponent: {
                    id: player1.userId,
                    username: player1.username
                }
            });
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç (3 —Å–µ–∫—É–Ω–¥—ã)
            setTimeout(() => {
                room.startTime = Date.now();
                room.status = 'playing';
                io.to(player1.socketId).emit('countdown', 3);
                io.to(player2.socketId).emit('countdown', 3);
            }, 1000);
        } else {
            socket.emit('searching', { queueSize: matchmakingQueue.length });
        }
    });
    
    // ===== –û–¢–ú–ï–ù–ê –ü–û–ò–°–ö–ê =====
    socket.on('cancelMatch', () => {
        removePlayerFromQueue(socket.id);
        console.log(`‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞: ${socket.id}`);
    });
    
    // ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ì–†–û–ö–ê =====
    socket.on('playerUpdate', (data) => {
        const roomInfo = findPlayerRoom(socket.id);
        if (!roomInfo) return;
        
        const { room, playerId } = roomInfo;
        const { x, y, isAlive, score } = data;
        
        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${playerId.substring(0, 10)}... isAlive=${isAlive}, score=${score}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        room.updatePlayer(playerId, { x, y, isAlive, score });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
        const opponentId = room.getOpponent(playerId);
        if (!opponentId || !room.players[opponentId]) {
            console.log('‚ö†Ô∏è –û–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏–≥—Ä–æ–∫–∞:', playerId);
            return;
        }
        
        const opponentSocketId = room.players[opponentId].socketId;
        
        io.to(opponentSocketId).emit('opponentUpdate', {
            x,
            y,
            isAlive,
            score
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –∏–¥–µ—Ç)
        if (room.status !== 'finished') {
            const gameEndResult = room.checkGameEnd();
            if (gameEndResult) {
                console.log('üéØ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
                const playerIds = room.getPlayerIds();
                for (const pId of playerIds) {
                    const isWinner = pId === gameEndResult.winner;
                    const pOpponentId = room.getOpponent(pId);
                    
                    io.to(room.players[pId].socketId).emit('gameEnd', {
                        reason: gameEndResult.reason,
                        winner: isWinner,
                        yourScore: room.players[pId].score,
                        opponentScore: room.players[pOpponentId].score,
                        yourUsername: room.players[pId].username,
                        opponentUsername: room.players[pOpponentId].username
                    });
                }
                
                // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                setTimeout(() => {
                    gameRooms.delete(room.id);
                    console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${room.id} —É–¥–∞–ª–µ–Ω–∞`);
                }, 10000);
            }
        }
    });
    
    // ===== –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï =====
    socket.on('disconnect', () => {
        console.log(`üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        removePlayerFromQueue(socket.id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        const roomInfo = findPlayerRoom(socket.id);
        if (roomInfo) {
            const { room, playerId } = roomInfo;
            const opponentId = room.getOpponent(playerId);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –æ –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–µ
            if (room.players[opponentId]) {
                io.to(room.players[opponentId].socketId).emit('opponentDisconnected', {
                    message: '–û–ø–ø–æ–Ω–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –í—ã –ø–æ–±–µ–¥–∏–ª–∏!'
                });
            }
            
            // –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
            gameRooms.delete(room.id);
            console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${room.id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑-–∑–∞ –¥–∏—Å–∫–æ–Ω–Ω–µ–∫—Ç–∞`);
        }
    });
});

// ==================== REST API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ====================

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/stats', (req, res) => {
    res.json({
        queueSize: matchmakingQueue.length,
        activeGames: gameRooms.size,
        connectedPlayers: io.sockets.sockets.size
    });
});

// –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
    res.json({ status: 'ok', timestamp: Date.now() });
});

// ==================== SERVER START ====================

const PORT = process.env.PORT || 3000;

server.listen(PORT, () => {
    console.log(`üöÄ Monkey Flipper 1v1 Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:${PORT}/api/stats`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('üõë SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        process.exit(0);
    });
});
