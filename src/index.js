// ==================== SEEDED RANDOM NUMBER GENERATOR ====================
// –î–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º –≤ 1v1 —Ä–µ–∂–∏–º–µ
class SeededRandom {
    constructor(seed) {
        this.seed = seed;
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π LCG (Linear Congruential Generator)
    next() {
        this.seed = (this.seed * 9301 + 49297) % 233280;
        return this.seed / 233280;
    }
    
    // –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [min, max]
    range(min, max) {
        return min + this.next() * (max - min);
    }
    
    // –°–ª—É—á–∞–π–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [min, max]
    intRange(min, max) {
        return Math.floor(this.range(min, max + 1));
    }
}

// ==================== SERVER CONFIGURATION ====================
// –ù–û–í–û–ï: URL —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–æ–≤ –ò Socket.IO
const SERVER_URL = window.location.hostname === 'localhost' 
    ? 'http://localhost:3000'  // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    : 'https://YOUR_RENDER_URL.onrender.com';  // ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® URL!

// –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram User ID
function getTelegramUserId() {
    try {
        const tg = window.Telegram?.WebApp;
        
        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –µ—Å—Ç—å
        if (window.location.search.includes('debug')) {
            alert('Telegram: ' + (tg ? '–ï—Å—Ç—å' : '–ù–µ—Ç') + 
                  '\nUser: ' + (tg?.initDataUnsafe?.user ? '–ï—Å—Ç—å' : '–ù–µ—Ç'));
        }
        
        if (tg && tg.initDataUnsafe && tg.initDataUnsafe.user) {
            console.log('‚úÖ Telegram user detected:', tg.initDataUnsafe.user);
            return {
                id: tg.initDataUnsafe.user.id.toString(),
                username: tg.initDataUnsafe.user.username || tg.initDataUnsafe.user.first_name || 'Anonymous'
            };
        }
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID:', e);
    }
    
    // Fallback: —Å–æ–∑–¥–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ localStorage)
    let anonymousId = localStorage.getItem('anonymousUserId');
    
    // üîß –í–†–ï–ú–ï–ù–ù–´–ô –§–ò–•: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 1v1 - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ù–û–í–´–ô ID –ø—Ä–∏ ?test=1
    // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ —ç—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Å–≤–æ–π ID
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('test')) {
        // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∫–∞–∂–¥–∞—è –≤–∫–ª–∞–¥–∫–∞ = –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫
        anonymousId = 'anonymous_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    } else if (!anonymousId) {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
        anonymousId = 'anonymous_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('anonymousUserId', anonymousId);
    }
    
    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID:', anonymousId);
    return { id: anonymousId, username: 'Anonymous' };
}

// –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function saveScoreToServer(userId, username, score) {
    try {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: userId=${userId}, score=${score}`);
        
        const response = await fetch(`${SERVER_URL}/api/save-score`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userId: userId,
                username: username,
                score: score,
                timestamp: new Date().toISOString()
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª:', result);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –∏–ª–∏ –Ω–µ—Ç)
        return {
            success: true,
            isNewRecord: result.isNewRecord,
            bestScore: result.bestScore,
            gamesPlayed: result.gamesPlayed
        };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        savePendingScore(userId, username, score);
        
        return {
            success: false,
            error: error.message
        };
    }
}

// –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
function savePendingScore(userId, username, score) {
    try {
        const pending = JSON.parse(localStorage.getItem('pendingScores') || '[]');
        pending.push({
            userId: userId,
            username: username,
            score: score,
            timestamp: Date.now()
        });
        // –•—Ä–∞–Ω–∏–º –º–∞–∫—Å–∏–º—É–º 10 –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
        if (pending.length > 10) {
            pending.shift();
        }
        localStorage.setItem('pendingScores', JSON.stringify(pending));
        console.log('üíæ –°—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏');
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ pendingScores:', e);
    }
}

// –ù–û–í–û–ï: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—á–µ—Ç—ã
async function retryPendingScores() {
    try {
        const pending = JSON.parse(localStorage.getItem('pendingScores') || '[]');
        if (pending.length === 0) return;

        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${pending.length} –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤`);

        for (const item of pending) {
            const result = await saveScoreToServer(item.userId, item.username, item.score);
            if (result.success) {
                // –£–±–∏—Ä–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                const index = pending.indexOf(item);
                pending.splice(index, 1);
            }
        }

        localStorage.setItem('pendingScores', JSON.stringify(pending));
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', e);
    }
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CONSTS = {
    WIDTH: 640,
    HEIGHT: (() => {
        // –î–ª—è Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º viewportHeight, –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ - innerHeight
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.viewportHeight) {
            console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram viewportHeight:', window.Telegram.WebApp.viewportHeight);
            return window.Telegram.WebApp.viewportHeight;
        }
        console.log('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º window.innerHeight:', window.innerHeight);
        return window.innerHeight;
    })(),
    GRAVITY: 650, // –§–ò–ö–°: –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞ (–±—ã–ª–æ 300) - –ø—Ä—ã–∂–∫–∏ –±—ã—Å—Ç—Ä–µ–µ
    JUMP_VELOCITY: -660, // –§–ò–ö–°: –ï—â—ë –±–æ–ª—å—à–µ —É–≤–µ–ª–∏—á–µ–Ω–æ (–±—ã–ª–æ -550) - —á—Ç–æ–±—ã –¥–æ–ø—Ä—ã–≥–∏–≤–∞—Ç—å –¥–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    MOVE_VELOCITY: 300,
    WALL_SLIDE_SPEED: 200, // –§–ò–ö–°: –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞ (–±—ã–ª–æ 100) - —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–≥—Ä—ã
    RECYCLE_DISTANCE: 500, // –§–ò–ö–°: –ï—â—ë –º–µ–Ω—å—à–µ (—Å 1500), —Ä–µ–∂–µ –∞–≤—Ç–æ-recycle
    PLATFORM_GAP: 250,
    SCORE_HEIGHT_INCREMENT: 10,
    SCORE_KILL: 100,
    PLAYER_BOUNCE: 0,
    DEBUG_PHYSICS: true,
    FALL_IMPACT_THRESHOLD: 5, // –ù–û–í–û–ï: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è –¥–ª—è game over –Ω–∞ –∑–µ–º–ª–µ (—á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∏—Ç—å —Å—Ç–∞—Ä—Ç –æ—Ç –ø–∞–¥–µ–Ω–∏—è)
    // –ù–û–í–û–ï: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    PLATFORM_TYPE_NORMAL_PERCENT: 60, // 60% –æ–±—ã—á–Ω—ã—Ö —à–∞—Ä–∏–∫–æ–≤
    PLATFORM_TYPE_MOVING_PERCENT: 30, // 30% –¥–≤–∏–∂—É—â–∏—Ö—Å—è —à–∞—Ä–∏–∫–æ–≤
    PLATFORM_TYPE_UNBREAKABLE_PERCENT: 10, // 10% –Ω–µ–ª–æ–ø–∞—é—â–∏—Ö—Å—è —à–∞—Ä–∏–∫–æ–≤
    MOVING_PLATFORM_SPEED: 20, // –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è —à–∞—Ä–∏–∫–æ–≤
    MOVING_PLATFORM_RANGE: 150, // –î–∏–∞–ø–∞–∑–æ–Ω –¥–≤–∏–∂–µ–Ω–∏—è (px –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ)
    BALLOON_SMASH_DURATION: 400, // –ù–û–í–û–ï: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–∑—Ä—ã–≤–∞ —à–∞—Ä–∏–∫–∞ (ms) - –±—ã–ª–æ 1000
};

class MenuScene extends Phaser.Scene {
    constructor() {
        super({ key: 'MenuScene' });
        this.scoreBoardElements = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤
        this.shopElements = []; // –ù–û–í–û–ï: –ú–∞—Å—Å–∏–≤ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    }

    preload() {
        this.load.image('background_img', 'assets/background.png');
        this.load.image('logo', 'assets/LogoJumper.png');
    }

    create() {
        // –§–æ–Ω —Å —Ä–∞—Å—Ç—è–∂–∫–æ–π (stretch) –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –∫–∞–∫ –≤ GameScene
        this.background = this.add.image(0, 0, 'background_img').setOrigin(0, 0);
        this.background.setDisplaySize(CONSTS.WIDTH, CONSTS.HEIGHT);

        // –ù–û–í–û–ï: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userData = getTelegramUserId();
        const isTelegram = window.Telegram?.WebApp?.initDataUnsafe?.user ? '‚úÖ' : '‚ùå';
        
        // –§–æ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        const debugBg = this.add.graphics();
        debugBg.fillStyle(0x000000, 0.8);
        debugBg.fillRoundedRect(10, 10, CONSTS.WIDTH - 20, 100, 10);
        debugBg.setDepth(20);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const debugText = this.add.text(20, 20, 
            `${isTelegram} Telegram SDK\n` +
            `üë§ Player: ${userData.username}\n` +
            `üÜî ID: ${userData.id}`,
            { 
                fontSize: '16px', 
                fill: '#FFFFFF', 
                fontFamily: 'Arial',
                lineSpacing: 5
            }
        ).setDepth(21);

        const titleImage = this.add.image(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 4, 'logo').setOrigin(0.5).setAlpha(0);
        this.tweens.add({
            targets: titleImage,
            scale: { from: 0, to: 1 },
            alpha: { from: 0, to: 1 },
            duration: 1000,
            ease: 'Bounce.easeOut'
        });

        // –ö–Ω–æ–ø–∫–∏ (—É–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–∏–º–∏)
        const buttons = [
            { text: 'Start', y: CONSTS.HEIGHT / 2, callback: () => this.scene.start('GameScene') },
            { text: '1v1 Online', y: CONSTS.HEIGHT / 2 + 80, callback: () => this.scene.start('MatchmakingScene') }, // –ù–û–í–û–ï: 1v1 —Ä–µ–∂–∏–º
            { text: 'Leaderboard', y: CONSTS.HEIGHT / 2 + 160, callback: () => this.openLeaderboard() },
            { text: 'Shop', y: CONSTS.HEIGHT / 2 + 240, callback: () => this.showShop() }, // –ù–û–í–û–ï: –ö–Ω–æ–ø–∫–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
            {
                text: 'Exit', y: CONSTS.HEIGHT / 2 + 320, callback: () => { // –ù–û–í–û–ï: –°–¥–≤–∏–Ω—É–ª Exit –µ—â–µ –Ω–∏–∂–µ
                    if (!window.close()) {
                        this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 + 200, 'Please close the tab', { fontSize: '24px', fill: '#F00' }).setOrigin(0.5);
                    }
                }
            }
        ];

        buttons.forEach(btnData => {
            const btnGraphics = this.add.graphics().setDepth(1);
            btnGraphics.fillStyle(0xFFFFFF, 1);
            btnGraphics.fillRoundedRect(CONSTS.WIDTH / 2 - 100, btnData.y - 30, 200, 60, 10);

            const btnText = this.add.text(CONSTS.WIDTH / 2, btnData.y, btnData.text, { fontSize: '32px', fill: '#000', fontFamily: 'Arial' }).setOrigin(0.5).setInteractive({ useHandCursor: true }).setDepth(2);

            const setButtonColor = (hover) => {
                btnGraphics.clear();
                btnGraphics.fillStyle(hover ? 0xCCCCCC : 0xFFFFFF, 1);
                btnGraphics.fillRoundedRect(CONSTS.WIDTH / 2 - 100, btnData.y - 30, 200, 60, 10);
            };

            btnText.on('pointerover', () => setButtonColor(true));
            btnText.on('pointerout', () => setButtonColor(false));
            btnText.on('pointerdown', btnData.callback);

            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            [btnGraphics, btnText].forEach(obj => {
                obj.setAlpha(0);
                this.tweens.add({
                    targets: obj,
                    alpha: 1,
                    duration: 800,
                    ease: 'Power2'
                });
            });
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤
    // –§–ò–ö–°: –û—Ç–∫—Ä—ã–≤–∞–µ–º leaderboard.html –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ—Ä–¥–æ–≤
    openLeaderboard() {
        console.log('üìä –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ Telegram
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL –∏–≥—Ä—ã
            const currentUrl = window.location.origin;
            const leaderboardUrl = `${currentUrl}/leaderboard.html`;
            
            console.log('üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º URL:', leaderboardUrl);
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ Telegram —á–µ—Ä–µ–∑ openLink
            tg.openLink(leaderboardUrl);
        } else {
            // –ï—Å–ª–∏ –Ω–µ –≤ Telegram - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞
            console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞');
            window.open('/leaderboard.html', '_blank');
        }
    }

    // –£–ë–†–ê–ù–û: –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ showScoreBoard() –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤ - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
    hideScoreBoard() {
        // –ü—É—Å—Ç–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    }

    // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    showShop() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–ª—é—Ç—É –∏–∑ localStorage
        let bananas = parseInt(localStorage.getItem('bananas')) || 0;
        let coins = parseInt(localStorage.getItem('coins')) || 0;

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ (–¥–ª—è —Å–∫–∏–Ω–æ–≤, –±—É—Å—Ç–æ–≤ –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞)
        const shopHeight = 500;
        const shopWidth = 400;

        // –§–æ–Ω –¥–ª—è Shop
        const shopBg = this.add.graphics();
        shopBg.fillStyle(0x000000, 0.7);
        shopBg.fillRoundedRect(CONSTS.WIDTH / 2 - shopWidth / 2, CONSTS.HEIGHT / 2 - shopHeight / 2, shopWidth, shopHeight, 15);
        shopBg.setDepth(14).setAlpha(0).setScale(0);
        this.shopElements.push(shopBg);

        // –¢–µ–Ω—å
        const shadowGraphics = this.add.graphics();
        shadowGraphics.fillStyle(0x000000, 0.5);
        shadowGraphics.fillRoundedRect(CONSTS.WIDTH / 2 - shopWidth / 2 + 5, CONSTS.HEIGHT / 2 - shopHeight / 2 + 5, shopWidth, shopHeight, 15);
        shadowGraphics.setDepth(13).setAlpha(0).setScale(0);
        this.shopElements.push(shadowGraphics);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const titleText = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - shopHeight / 2 + 30, '–ú–∞–≥–∞–∑–∏–Ω', { fontSize: '32px', fill: '#FFFFFF', fontFamily: 'Arial Black', stroke: '#000000', strokeThickness: 4, align: 'center' }).setOrigin(0.5).setDepth(15).setAlpha(0).setScale(0);
        this.shopElements.push(titleText);

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
        const bananasText = this.add.text(CONSTS.WIDTH / 2 - 100, CONSTS.HEIGHT / 2 - shopHeight / 2 + 70, `–ë–∞–Ω–∞–Ω—ã: ${bananas}`, { fontSize: '24px', fill: '#FFFFFF' }).setOrigin(0.5).setDepth(15).setAlpha(0).setScale(0);
        this.shopElements.push(bananasText);

        const coinsText = this.add.text(CONSTS.WIDTH / 2 + 100, CONSTS.HEIGHT / 2 - shopHeight / 2 + 70, `–ú–æ–Ω–µ—Ç—ã: ${coins}`, { fontSize: '24px', fill: '#FFFFFF' }).setOrigin(0.5).setDepth(15).setAlpha(0).setScale(0);
        this.shopElements.push(coinsText);

        // –°–µ–∫—Ü–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞–Ω–æ–≤ (–º–æ–∫–∏)
        const dailyButton = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - shopHeight / 2 + 110, '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (+50 –±–∞–Ω–∞–Ω–æ–≤)', { fontSize: '20px', fill: '#FFFFFF' }).setOrigin(0.5).setInteractive({ useHandCursor: true }).setDepth(15).setAlpha(0).setScale(0);
        dailyButton.on('pointerdown', () => {
            bananas += 50;
            localStorage.setItem('bananas', bananas);
            bananasText.setText(`–ë–∞–Ω–∞–Ω—ã: ${bananas}`);
        });
        this.shopElements.push(dailyButton);

        const adButton = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - shopHeight / 2 + 140, '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã (+100 –±–∞–Ω–∞–Ω–æ–≤)', { fontSize: '20px', fill: '#FFFFFF' }).setOrigin(0.5).setInteractive({ useHandCursor: true }).setDepth(15).setAlpha(0).setScale(0);
        adButton.on('pointerdown', () => {
            bananas += 100;
            localStorage.setItem('bananas', bananas);
            bananasText.setText(`–ë–∞–Ω–∞–Ω—ã: ${bananas}`);
        });
        this.shopElements.push(adButton);

        const buyCoinsButton = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - shopHeight / 2 + 170, '–ö—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã (+100 –∑–∞ —Ä–µ–∞–ª, –º–æ–∫)', { fontSize: '20px', fill: '#FFFFFF' }).setOrigin(0.5).setInteractive({ useHandCursor: true }).setDepth(15).setAlpha(0).setScale(0);
        buyCoinsButton.on('pointerdown', () => {
            coins += 100;
            localStorage.setItem('coins', coins);
            coinsText.setText(`–ú–æ–Ω–µ—Ç—ã: ${coins}`);
        });
        this.shopElements.push(buyCoinsButton);

        // –°–µ–∫—Ü–∏—è —Å–∫–∏–Ω–æ–≤ (–º–æ–∫–∏)
        const skin1Button = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - shopHeight / 2 + 210, '–û–±—ã—á–Ω—ã–π —Å–∫–∏–Ω (100 –±–∞–Ω–∞–Ω–æ–≤)', { fontSize: '20px', fill: '#FFFFFF' }).setOrigin(0.5).setInteractive({ useHandCursor: true }).setDepth(15).setAlpha(0).setScale(0);
        skin1Button.on('pointerdown', () => {
            if (bananas >= 100) {
                bananas -= 100;
                localStorage.setItem('bananas', bananas);
                bananasText.setText(`–ë–∞–Ω–∞–Ω—ã: ${bananas}`);
                console.log('–û–±—ã—á–Ω—ã–π —Å–∫–∏–Ω –∫—É–ø–ª–µ–Ω –∏ –ø—Ä–∏–º–µ–Ω—ë–Ω (–º–æ–∫)');
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–Ω–∞ –≤ GameScene, –Ω–æ –ø–æ–∫–∞ –º–æ–∫
            }
        });
        this.shopElements.push(skin1Button);

        const skin2Button = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - shopHeight / 2 + 240, '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–∫–∏–Ω (500 –±–∞–Ω–∞–Ω–æ–≤)', { fontSize: '20px', fill: '#FFFFFF' }).setOrigin(0.5).setInteractive({ useHandCursor: true }).setDepth(15).setAlpha(0).setScale(0);
        skin2Button.on('pointerdown', () => {
            if (bananas >= 500) {
                bananas -= 500;
                localStorage.setItem('bananas', bananas);
                bananasText.setText(`–ë–∞–Ω–∞–Ω—ã: ${bananas}`);
                console.log('–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Å–∫–∏–Ω –∫—É–ø–ª–µ–Ω –∏ –ø—Ä–∏–º–µ–Ω—ë–Ω (–º–æ–∫)');
            }
        });
        this.shopElements.push(skin2Button);

        // –°–µ–∫—Ü–∏—è –±—É—Å—Ç–æ–≤
        const rocketButton = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - shopHeight / 2 + 280, '–†–∞–∫–µ—Ç–∞ (50 –±–∞–Ω–∞–Ω–æ–≤)', { fontSize: '20px', fill: '#FFFFFF' }).setOrigin(0.5).setInteractive({ useHandCursor: true }).setDepth(15).setAlpha(0).setScale(0);
        rocketButton.on('pointerdown', () => {
            if (bananas >= 50) {
                bananas -= 50;
                let rockets = parseInt(localStorage.getItem('rockets')) || 0;
                rockets += 1;
                localStorage.setItem('bananas', bananas);
                localStorage.setItem('rockets', rockets);
                bananasText.setText(`–ë–∞–Ω–∞–Ω—ã: ${bananas}`);
            }
        });
        this.shopElements.push(rocketButton);

        const lifeButton = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - shopHeight / 2 + 310, '–î–æ–ø. –∂–∏–∑–Ω—å (20 –º–æ–Ω–µ—Ç, –º–∞–∫—Å 3)', { fontSize: '20px', fill: '#FFFFFF' }).setOrigin(0.5).setInteractive({ useHandCursor: true }).setDepth(15).setAlpha(0).setScale(0);
        lifeButton.on('pointerdown', () => {
            let extraLives = parseInt(localStorage.getItem('extraLives')) || 0;
            if (coins >= 20 && extraLives < 3) {
                coins -= 20;
                extraLives += 1;
                localStorage.setItem('coins', coins);
                localStorage.setItem('extraLives', extraLives);
                coinsText.setText(`–ú–æ–Ω–µ—Ç—ã: ${coins}`);
            }
        });
        this.shopElements.push(lifeButton);

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        const backGraphics = this.add.graphics().setDepth(15);
        backGraphics.fillStyle(0xFFFFFF, 1);
        backGraphics.fillRoundedRect(CONSTS.WIDTH / 2 - 60, CONSTS.HEIGHT / 2 + shopHeight / 2 - 60, 120, 50, 10);
        backGraphics.setAlpha(0).setScale(0);
        this.shopElements.push(backGraphics);

        const backText = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 + shopHeight / 2 - 35, '–ù–∞–∑–∞–¥', { fontSize: '24px', fill: '#000', fontFamily: 'Arial' }).setOrigin(0.5).setInteractive({ useHandCursor: true }).setDepth(16).setAlpha(0).setScale(0);
        this.shopElements.push(backText);

        backText.on('pointerdown', () => {
            this.hideShop();
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.tweens.add({
            targets: [shopBg, shadowGraphics, backGraphics],
            scale: { from: 0, to: 1 },
            alpha: { from: 0, to: 1 },
            duration: 800,
            ease: 'Power2'
        });

        this.tweens.add({
            targets: [titleText, bananasText, coinsText, dailyButton, adButton, buyCoinsButton, skin1Button, skin2Button, rocketButton, lifeButton, backText],
            scale: { from: 0, to: 1 },
            alpha: { from: 0, to: 1 },
            duration: 800,
            delay: 400,
            ease: 'Power2'
        });
    }

    // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    hideShop() {
        this.shopElements.forEach(element => element.destroy());
        this.shopElements = [];
    }
}

// ==================== MATCHMAKING SCENE ====================
// –°—Ü–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è 1v1 —Ä–µ–∂–∏–º–∞
class MatchmakingScene extends Phaser.Scene {
    constructor() {
        super({ key: 'MatchmakingScene' });
        this.socket = null;
        this.userData = null;
        this.searchingText = null;
        this.dots = '';
        this.dotTimer = null;
    }
    
    create() {
        // –§–æ–Ω
        this.background = this.add.image(0, 0, 'background_img').setOrigin(0, 0);
        this.background.setDisplaySize(CONSTS.WIDTH, CONSTS.HEIGHT);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 4, '1v1 Online Mode', {
            fontSize: '42px',
            fill: '#FFFFFF',
            fontFamily: 'Arial Black',
            stroke: '#000000',
            strokeThickness: 6
        }).setOrigin(0.5);
        
        // –°—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞
        this.searchingText = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2, 'Searching for opponent', {
            fontSize: '32px',
            fill: '#FFFFFF',
            fontFamily: 'Arial',
            stroke: '#000000',
            strokeThickness: 4
        }).setOrigin(0.5);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–æ—á–µ–∫
        this.dotTimer = this.time.addEvent({
            delay: 500,
            callback: () => {
                this.dots = this.dots.length >= 3 ? '' : this.dots + '.';
                this.searchingText.setText('Searching for opponent' + this.dots);
            },
            loop: true
        });
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        const cancelButton = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT - 100, 'Cancel', {
            fontSize: '28px',
            fill: '#FFFFFF',
            fontFamily: 'Arial',
            backgroundColor: '#FF0000',
            padding: { x: 20, y: 10 }
        }).setOrigin(0.5).setInteractive({ useHandCursor: true });
        
        cancelButton.on('pointerdown', () => {
            this.cancelMatchmaking();
        });
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        this.connectToServer();
    }
    
    connectToServer() {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userData = getTelegramUserId();
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Socket.IO —Å–µ—Ä–≤–µ—Ä—É
        const socketUrl = SERVER_URL || window.location.origin;
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:', socketUrl);
        
        this.socket = io(socketUrl);
        
        this.socket.on('connect', () => {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É Socket.IO:', this.socket.id);
            
            // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –º–∞—Ç—á–∞
            this.socket.emit('findMatch', {
                userId: this.userData.id,
                username: this.userData.username
            });
        });
        
        this.socket.on('searching', (data) => {
            console.log('üîç –ü–æ–∏—Å–∫... –ò–≥—Ä–æ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏:', data.queueSize);
        });
        
        this.socket.on('gameStart', (data) => {
            console.log('üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!', data);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Ç–æ—á–µ–∫
            if (this.dotTimer) {
                this.dotTimer.remove();
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ GameScene —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ 1v1
            this.scene.start('GameScene', {
                mode: '1v1',
                seed: data.seed,
                roomId: data.roomId,
                opponent: data.opponent,
                socket: this.socket
            });
        });
        
        this.socket.on('countdown', (seconds) => {
            this.searchingText.setText(`Game starts in ${seconds}...`);
        });
        
        this.socket.on('connect_error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            this.searchingText.setText('Connection error!\nReturning to menu...');
            
            this.time.delayedCall(2000, () => {
                this.scene.start('MenuScene');
            });
        });
    }
    
    cancelMatchmaking() {
        console.log('‚ùå –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞ –º–∞—Ç—á–∞');
        
        if (this.socket) {
            this.socket.emit('cancelMatch');
            this.socket.disconnect();
        }
        
        if (this.dotTimer) {
            this.dotTimer.remove();
        }
        
        this.scene.start('MenuScene');
    }
    
    shutdown() {
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å—Ü–µ–Ω—ã
        if (this.dotTimer) {
            this.dotTimer.remove();
        }
    }
}

// –ö–ª–∞—Å—Å —Å—Ü–µ–Ω—ã –∏–≥—Ä—ã (—Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ)
class GameScene extends Phaser.Scene {
    constructor() {
    super({ key: 'GameScene' });
    this.player = null;
    this.isFalling = false;
    this.isJumping = false; // –ù–û–í–û–ï: –§–ª–∞–≥ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä—ã–∂–∫–∞
    this.lastBouncePlatform = null; // –§–ò–ö–°: –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å –∫–æ—Ç–æ—Ä–æ–π –ø—Ä—ã–≥–Ω—É–ª–∏
    this.platforms = null;
    this.score = 0;
    this.heightScore = 0;
    this.killScore = 0;
    this.scoreText = null;
    this.gameOver = false;
    this.aKey = null;
    this.dKey = null;
    this.rKey = null;
    this.escKey = null;
    this.wKey = null;
    this.minPlatformY = 0;
    this.pausedForConfirm = false;
    this.confirmElements = [];
    
    // ==================== 1V1 MODE VARIABLES ====================
    this.gameMode = 'solo'; // 'solo' –∏–ª–∏ '1v1'
    this.gameSeed = null; // Seed –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º –≤ 1v1
    this.seededRandom = null; // –≠–∫–∑–µ–º–ø–ª—è—Ä SeededRandom
    this.opponent = null; // –°–ø—Ä–∞–π—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ (ghost)
    this.opponentData = { x: 0, y: 0, isAlive: true, animation: 'idle' }; // –î–∞–Ω–Ω—ã–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    this.opponentNameText = null; // –¢–µ–∫—Å—Ç —Å –∏–º–µ–Ω–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    this.opponentScoreText = null; // –¢–µ–∫—Å—Ç —Å—á–µ—Ç–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    this.opponentFellText = null; // –¢–µ–∫—Å—Ç "Opponent Fell"
    this.socket = null; // Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    this.roomId = null; // ID –∫–æ–º–Ω–∞—Ç—ã –≤ 1v1
    this.gameStartTime = null; // –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
    this.gameDuration = 120000; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã 2 –º–∏–Ω—É—Ç—ã
    this.gameTimer = null; // –¢–∞–π–º–µ—Ä 2 –º–∏–Ω—É—Ç—ã
    this.timerText = null; // UI —Ç–∞–π–º–µ—Ä
    this.lastUpdateTime = 0; // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    this.clingPlatform = null;
    this.playerStartY = 0; // –ù–û–í–û–ï: –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ score
    this.clingSide = null;
    this.rockets = 0;
    this.extraLives = 0;
    this.maxReachedY = Infinity; // –ù–û–í–û–ï: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∏–≥—Ä–æ–∫–∞ (–º–µ–Ω—å—à–µ = –≤—ã—à–µ, —Ç.–∫. Y –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
    this.rocketActive = false;
    this.previousAnimKey = null;
    this.dumbTimer = null;
    this.previousStandingPlatform = null;
    this.previousClingPlatform = null;
    this.ground = null;
    this.fallStartTime = null; // –ù–û–í–û–ï: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞–¥–µ–Ω–∏—è
    this.maxFallDuration = 1000; // –ù–û–í–û–ï: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–∞–¥–µ–Ω–∏—è –≤ –º—Å (1 —Å–µ–∫—É–Ω–¥–∞)
    this.groundAppeared = false; // –ù–û–í–û–ï: –§–ª–∞–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–µ–º–ª–∏ (–≤–º–µ—Å—Ç–æ groundMoving)
    
    // –ù–û–í–û–ï: –§–ª–∞–≥–∏ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    this.touchLeft = false;
    this.touchRight = false;
    this.touchJump = false;
    this.touchZones = null;
}

    preload() {
        this.load.image('background_img', 'assets/background.png');
        this.load.image('playerSprite', 'assets/monkey_stand.png');
        this.load.image('playerJumpSprite', 'assets/monkey_jump.png');
        this.load.image('monkey_down_1', 'assets/monkey_down_1.png'); // –ù–û–í–û–ï: –¢–µ–∫—Å—Ç—É—Ä–∞ –ø–∞–¥–µ–Ω–∏—è 1
        this.load.image('monkey_down_2', 'assets/monkey_down_2.png'); // –ù–û–í–û–ï: –¢–µ–∫—Å—Ç—É—Ä–∞ –ø–∞–¥–µ–Ω–∏—è 2
        this.load.image('monkey_up', 'assets/monkey_up.png'); // –ù–û–í–û–ï: –¢–µ–∫—Å—Ç—É—Ä–∞ –ø–æ–¥—ä—ë–º–∞ (–ø—Ä—ã–∂–∫–∞ –≤–≤–µ—Ä—Ö)
        this.load.image('monkey_dumb', 'assets/monkey_dumb.png'); // –ù–û–í–û–ï: –¢–µ–∫—Å—Ç—É—Ä–∞ —É–¥–∞—Ä–∞ –≥–æ–ª–æ–≤–æ–π
        this.load.image('monkey_fall_floor', 'assets/monkey_fall_floor_1.png'); // –ù–û–í–û–ï: –¢–µ–∫—Å—Ç—É—Ä–∞ –ø–∞–¥–µ–Ω–∏—è –Ω–∞ –∑–µ–º–ª—é
        this.load.image('platform', 'assets/balloon_green.png');
        this.load.image('balloon_under_player', 'assets/balloon_under_player.png'); // –ù–û–í–û–ï: –¢–µ–∫—Å—Ç—É—Ä–∞ –ø–æ–¥ –∏–≥—Ä–æ–∫–æ–º
        this.load.image('balloon_smash', 'assets/balloon_smash.png'); // –ù–û–í–û–ï: –¢–µ–∫—Å—Ç—É—Ä–∞ smash
        this.load.image('balloon_dead', 'assets/balloon_dead.png'); // –ù–û–í–û–ï: –¢–µ–∫—Å—Ç—É—Ä–∞ dead
        this.load.image('balloon_unbreakable', 'assets/balloon_blue.png'); // –ù–û–í–û–ï: –¢–µ–∫—Å—Ç—É—Ä–∞ –¥–ª—è –Ω–µ–ª–æ–ø–∞—é—â–∏—Ö—Å—è —à–∞—Ä–∏–∫–æ–≤ (—Å–∏–Ω–∏–π —Ü–≤–µ—Ç)
        this.load.image('ground', 'assets/ground.png');

        // –î–æ–±–∞–≤—å –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (—É–±–µ—Ä–∏ –ø–æ—Ç–æ–º)
        this.load.on('filecomplete', (key) => console.log('Loaded texture:', key));
        this.load.on('loaderror', (file) => console.error('Load error:', file.key, file.src));
    }

    create(data) {
        // ==================== 1V1 MODE INITIALIZATION ====================
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è –ª–∏ –≤ 1v1 —Ä–µ–∂–∏–º–µ
        if (data && data.mode === '1v1') {
            this.gameMode = '1v1';
            this.gameSeed = data.seed;
            this.roomId = data.roomId;
            this.socket = data.socket;
            this.opponentData = {
                username: data.opponent.username,
                id: data.opponent.id,
                y: 0,
                isAlive: true,
                score: 0
            };
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º seeded random
            this.seededRandom = new SeededRandom(this.gameSeed);
            
            console.log('üéÆ 1v1 —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
            console.log('   Seed:', this.gameSeed);
            console.log('   Room:', this.roomId);
            console.log('   Opponent:', this.opponentData.username);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Socket.IO
            this.setupSocketListeners();
        } else {
            this.gameMode = 'solo';
            console.log('üéÆ Solo —Ä–µ–∂–∏–º');
        }
        
        // –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –±—É—Å—Ç—ã –∏–∑ localStorage –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –∏–≥—Ä—ã
        this.rockets = parseInt(localStorage.getItem('rockets')) || 0;
        this.extraLives = parseInt(localStorage.getItem('extraLives')) || 0;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        this.score = 0;
        this.isFalling = false;
        this.heightScore = 0;
        this.killScore = 0;
        this.gameOver = false;
        this.pausedForConfirm = false;
        this.clingPlatform = null;
        this.rocketActive = false; // –ù–û–í–û–ï
        this.previousAnimKey = null; // –ù–û–í–û–ï: –°–±—Ä–æ—Å
        this.previousStandingPlatform = null;
        this.previousClingPlatform = null;
        this.fallStartTime = null; // –ù–û–í–û–ï: –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø–∞–¥–µ–Ω–∏—è
        this.groundAppeared = false; // –ù–û–í–û–ï: –°–±—Ä–æ—Å –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–µ–º–ª–∏
        this.playerStartY = 0; // –ù–û–í–û–ï: –°–±—Ä–æ—Å —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏

        // –§–æ–Ω —Å —Ä–∞—Å—Ç—è–∂–∫–æ–π (stretch) –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        this.background = this.add.image(0, 0, 'background_img').setOrigin(0, 0).setScrollFactor(0);
        this.background.setDisplaySize(CONSTS.WIDTH, CONSTS.HEIGHT); // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É

        // –§–ò–ö–°: –ë–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ (–±–µ–ª—ã–π —Å —á–µ—Ä–Ω–æ–π –æ–±–≤–æ–¥–∫–æ–π)
        this.scoreText = this.add.text(16, 16, `Score: ${this.score}`, { 
            fontSize: '42px', 
            fill: '#FFFFFF',
            fontFamily: 'Arial Black',
            stroke: '#000000',
            strokeThickness: 6
        }).setScrollFactor(0).setDepth(100); // –£–≤–µ–ª–∏—á–µ–Ω depth —á—Ç–æ–±—ã –±—ã–ª –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ

        // ==================== 1V1 UI ELEMENTS ====================
        if (this.gameMode === '1v1') {
            // –¢–∞–π–º–µ—Ä (—Ü–µ–Ω—Ç—Ä –≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞)
            this.timerText = this.add.text(CONSTS.WIDTH / 2, 16, '2:00', {
                fontSize: '48px',
                fill: '#FFFF00',
                fontFamily: 'Arial Black',
                stroke: '#000000',
                strokeThickness: 6
            }).setOrigin(0.5, 0).setScrollFactor(0).setDepth(100);
            
            // –°—á–µ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ (—Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É)
            this.opponentScoreText = this.add.text(CONSTS.WIDTH - 16, 16, `Opponent: 0`, {
                fontSize: '32px',
                fill: '#FF6666',
                fontFamily: 'Arial',
                stroke: '#000000',
                strokeThickness: 4
            }).setOrigin(1, 0).setScrollFactor(0).setDepth(100);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
            this.gameStartTime = this.time.now;
            this.gameDuration = 120000; // 2 –º–∏–Ω—É—Ç—ã
        }

        this.anims.create({
            key: 'jump',
            frames: [{ key: 'playerJumpSprite' }, { key: 'playerSprite' }],
            frameRate: 10,
            repeat: 0,
            yoyo: false
        });

        // –ù–û–í–û–ï: –ê–Ω–∏–º–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —Ñ—Ä–µ–π–º
        this.anims.create({
            key: 'fall',
            frames: [
                { key: 'monkey_down_1', duration: 1000 }, // 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —Ñ—Ä–µ–π–º (–Ω–∞—á–∞–ª–æ –ø–∞–¥–µ–Ω–∏—è)
                { key: 'monkey_down_2', duration: 1000 } // 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ñ—Ä–µ–π–º (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è)
            ],
            repeat: -1 // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º, —á—Ç–æ–±—ã —á–µ—Ä–µ–¥–æ–≤–∞—Ç—å
        });

        // –ù–û–í–û–ï: –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥—ä—ë–º–∞ (–ø—Ä—ã–∂–∫–∞ –≤–≤–µ—Ä—Ö) - —Å—Ç–∞—Ç–∏—á–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –Ω–∞ –≤—Ä–µ–º—è –ø–æ–ª—ë—Ç–∞ –≤–≤–µ—Ä—Ö
        this.anims.create({
            key: 'rise',
            frames: [{ key: 'monkey_up' }], // –ü—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—ä—ë–º–∞
            frameRate: 1,
            repeat: -1 // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º (—Ö–æ—Ç—è –∏ —Å—Ç–∞—Ç–∏—á–Ω–∞—è, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∞—Å—å)
        });

        this.createPlatforms();
        this.createPlayer();
        this.collider = this.physics.add.collider(this.player, this.platforms, this.handlePlayerPlatformCollision, null, this);
        // –§–ò–ö–°: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–ª–ª–∞–π–¥–µ—Ä –¥–ª—è –∑–µ–º–ª–∏ (–æ–Ω–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ platforms)
        this.groundCollider = this.physics.add.collider(this.player, this.ground, this.handlePlayerPlatformCollision, null, this);
        // –£–ë–†–ê–ù–û: startFollow - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–µ—Ä–≥–∞–Ω—å—è
        // this.cameras.main.startFollow(this.player, false, 0, 0);
        this.createKeys();
        this.physics.world.setBounds(0, -1000000, CONSTS.WIDTH, 2000000);
        this.scale.on('resize', this.handleResize, this);
        
        // –§–ò–ö–°: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ shutdown –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–≤–∞–∂–Ω–æ –¥–ª—è Telegram!)
        this.events.once('shutdown', this.cleanup, this);
    }

    createPlayer() {
        // –§–ò–ö–°: –ü–æ–ª—É—á–∞–µ–º –∑–µ–º–ª—é (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø—Ä–∞–π—Ç, –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã)
        const ground = this.ground;

        // –§–ò–ö–°: –í—ã—á–∏—Å–ª—è–µ–º Y –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞ –∏–≥—Ä–æ–∫–∞: —Ü–µ–Ω—Ç—Ä –∑–µ–º–ª–∏ –º–∏–Ω—É—Å –ø–æ–ª–æ–≤–∏–Ω—É –≤—ã—Å–æ—Ç—ã –∑–µ–º–ª–∏ –º–∏–Ω—É—Å –ø–æ–ª–æ–≤–∏–Ω—É –≤—ã—Å–æ—Ç—ã –∏–≥—Ä–æ–∫–∞
        const playerHeight = 80; // –§–ò–ö–°: –£–º–µ–Ω—å—à–µ–Ω–æ (–±—ã–ª–æ 100) - –º–µ–Ω—å—à–µ –æ–±–µ–∑—å—è–Ω–∫–∞
        const groundHalfHeight = ground.displayHeight / 2;
        const playerHalfHeight = playerHeight / 2;
        const playerY = ground.y - groundHalfHeight - playerHalfHeight;

        this.player = this.physics.add.sprite(CONSTS.WIDTH / 2, playerY, 'playerSprite'); // –§–ò–ö–°: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Y –Ω–∞ –∑–µ–º–ª–µ
        this.player.setScale(0.7); // –§–ò–ö–°: –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø—Ä–∞–π—Ç–∞ –æ–±–µ–∑—å—è–Ω–∫–∏ –¥–æ 70%
        this.player.setBounce(0, CONSTS.PLAYER_BOUNCE);
        this.player.setVelocityY(0); // –§–ò–ö–°: –Ø–≤–Ω–æ –Ω—É–ª–µ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–Ω–∏–∑ (–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        
        // –§–ò–ö–°: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hitbox —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º offset –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        const bodyWidth = 62 * 0.7 * 0.8;  // –®–∏—Ä–∏–Ω–∞ —Ç–µ–ª–∞ (—É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ 20%)
        const bodyHeight = playerHeight * 0.8; // –í—ã—Å–æ—Ç–∞ —Ç–µ–ª–∞ (—É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ 20%)
        const offsetX = (this.player.displayWidth - bodyWidth) / 2; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ X
        const offsetY = (this.player.displayHeight - bodyHeight) / 2; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ Y
        this.player.body.setSize(bodyWidth, bodyHeight);
        this.player.body.setOffset(offsetX, offsetY); // –ö–†–ò–¢–ò–ß–ù–û: –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–ª–æ!
        
        this.player.setOrigin(0.5, 0.5);
        this.player.setDepth(10);
        this.player.setCollideWorldBounds(true); // –§–ò–ö–°: –í–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –º–∏—Ä–∞
        this.player.body.maxVelocity.set(300, 1200); // –§–ò–ö–°: –£–≤–µ–ª–∏—á–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è (–±—ã–ª–æ 800)

        // –§–ò–ö–°: –°—Ä–∞–∑—É idle-–∞–Ω–∏–º–∞—Ü–∏—è (–∏–≥—Ä–æ–∫ —Å—Ç–æ–∏—Ç –Ω–∞ –∑–µ–º–ª–µ)
        this.player.anims.stop();
        this.player.setTexture('playerSprite');

        // –ù–û–í–û–ï: –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ score
        this.playerStartY = playerY;
        this.maxReachedY = playerY; // –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—É—é –≤—ã—Å–æ—Ç—É

        console.log('Player Y:', playerY, 'Ground Y:', ground.y, 'Ground Half Height:', groundHalfHeight, 'Player Half Height:', playerHalfHeight);
        
        // ==================== OPPONENT GHOST (1V1 MODE) ====================
        if (this.gameMode === '1v1') {
            this.createOpponentGhost(playerY);
        }
    }
    
    createOpponentGhost(startY) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ ghost –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é Y –ø–æ–∑–∏—Ü–∏—é –∏–∑ opponentData (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º startY
        const initialY = this.opponentData.y || startY;
        this.opponent = this.add.sprite(CONSTS.WIDTH / 2 + 100, initialY, 'playerSprite');
        this.opponent.setScale(0.7);
        this.opponent.setAlpha(0.5); // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
        this.opponent.setTint(0xFF6666); // –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
        this.opponent.setDepth(9); // –ß—É—Ç—å –Ω–∏–∂–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        
        console.log('üëª Opponent ghost —Å–æ–∑–¥–∞–Ω');
        console.log('   Ghost Y:', this.opponent.y, 'Player Y:', this.player.y);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞–¥ –Ω–∏–º
        this.opponentNameText = this.add.text(0, -50, this.opponentData.username, {
            fontSize: '20px',
            fill: '#FF6666',
            fontFamily: 'Arial',
            stroke: '#000000',
            strokeThickness: 3
        }).setOrigin(0.5).setDepth(9);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
        this.updateOpponentNamePosition();
        
        console.log('üëª Opponent ghost —Å–æ–∑–¥–∞–Ω –¥–ª—è:', this.opponentData.username);
    }
    
    updateOpponentNamePosition() {
        if (this.opponent && this.opponentNameText) {
            // –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∞ (–Ω–µ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç)
            const screenPos = this.cameras.main.getWorldPoint(
                this.opponent.x, 
                this.opponent.y - 50
            );
            this.opponentNameText.setPosition(this.opponent.x, this.opponent.y - 50);
        }
    }

    setupPlatformBody(platform) {
        platform.refreshBody(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é/—Ä–∞–∑–º–µ—Ä (–æ–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö)
        const body = platform.body;

        if (platform.isGround) {
            // –î–ª—è –∑–µ–º–ª–∏ ‚Äî –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π body (–ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞ –ø–æ—Å–ª–µ scale)
            body.setSize(platform.displayWidth, platform.displayHeight);
            body.checkCollision.down = true; // –ü–æ–ª–Ω–∞—è –∫–æ–ª–ª–∏–∑–∏—è —Å–Ω–∏–∑—É (–Ω–µ –ø—Ä–æ–≤–∞–ª–∏–≤–∞—Ç—å—Å—è —Å–∫–≤–æ–∑—å –∑–µ–º–ª—é)
            body.checkCollision.left = true;
            body.checkCollision.right = true;
            body.checkCollision.up = true; // –î–æ–±–∞–≤–ª—è–µ–º up, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç—Å–∫–æ–∫ –≥–æ–ª–æ–≤–æ–π –æ—Ç –∑–µ–º–ª–∏
            console.log('Ground body setup: Rectangle', body.width, body.height);
        } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º ‚Äî –∫—Ä—É–≥–ª—ã–π body (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            // –§–ò–ö–°: –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–¥–∏—É—Å –Ω–∞ 20% —á—Ç–æ–±—ã —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ –±—ã–ª–æ –≤–Ω—É—Ç—Ä–∏ –≤–∏–¥–∏–º–æ–π —á–∞—Å—Ç–∏ —à–∞—Ä–∏–∫–∞
            const radius = (platform.displayWidth / 2) * 0.8; // –ë—ã–ª–æ 0.5 (–ø–æ–ª–æ–≤–∏–Ω–∞), —Å—Ç–∞–ª–æ 0.4
            
            // –§–ò–ö–°: –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫—Ä—É–≥ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–π—Ç–∞
            const offsetX = (platform.displayWidth - radius * 2) / 4;  // –°–¥–≤–∏–≥ –ø–æ X –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            const offsetY = (platform.displayHeight - radius * 2) / 4; // –°–¥–≤–∏–≥ –ø–æ Y –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            body.setCircle(radius, offsetX, offsetY);
            
            body.checkCollision.down = false; // –ö–∞–∫ –±—ã–ª–æ: –±–µ–∑ –∫–æ–ª–ª–∏–∑–∏–∏ —Å–Ω–∏–∑—É (–ø—Ä—ã–∂–∫–∏ —Å–∫–≤–æ–∑—å?)
            body.checkCollision.left = true;
            body.checkCollision.right = true;
            body.checkCollision.up = true; // –î–æ–±–∞–≤–ª—è–µ–º up –¥–ª—è –æ—Ç—Å–∫–æ–∫–∞ –≥–æ–ª–æ–≤–æ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            console.log('Platform body setup: Circle radius', radius, '–∏–∑', platform.displayWidth, 'offset:', offsetX, offsetY);
        }
    }

    // ==================== 1V1 SOCKET.IO HANDLERS ====================
    setupSocketListeners() {
        if (!this.socket) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        this.socket.on('opponentUpdate', (data) => {
            console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞:', data);
            
            this.opponentData.x = data.x;
            this.opponentData.y = data.y;
            this.opponentData.isAlive = data.isAlive;
            this.opponentData.score = data.score;
            
            // –ï—Å–ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç —É–º–µ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ –∏ –Ω–µ –¥–≤–∏–≥–∞–µ–º ghost
            if (!data.isAlive && this.opponent) {
                console.log('üíÄ –û–ø–ø–æ–Ω–µ–Ω—Ç —É–ø–∞–ª!');
                
                // –û—Å—Ç–∞–≤–ª—è–µ–º ghost –Ω–∞ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏ (–ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º)
                // –ù–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –æ–Ω —É–º–µ—Ä
                if (this.opponentData.isAlive) {
                    // –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –ø–æ–ª—É—á–∏–ª–∏ —á—Ç–æ –æ–Ω –º–µ—Ä—Ç–≤
                    
                    // –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–Ω –ª–∏ ghost –Ω–∞ —ç–∫—Ä–∞–Ω–µ
                    const cameraTop = this.cameras.main.scrollY;
                    const cameraBottom = this.cameras.main.scrollY + CONSTS.HEIGHT;
                    
                    // –ï—Å–ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç —É–ø–∞–ª –¥–∞–ª–µ–∫–æ –≤–Ω–∏–∑ (–∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–∞–º–µ—Ä—ã) - –ø—Ä—è—á–µ–º ghost
                    if (data.y > cameraBottom + 200) {
                        console.log('üëª Ghost –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∫–∞–º–µ—Ä—ã - –ø—Ä—è—á–µ–º');
                        this.opponent.setVisible(false);
                    } else {
                        // –ï—Å–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∏–¥–∏–º–æ—Å—Ç–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ä—ã–º
                        this.opponent.setPosition(data.x, data.y);
                        this.opponent.setAlpha(0.3);
                        this.opponent.setTint(0x888888); // –°–µ—Ä—ã–π
                    }
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç "Opponent Fell"
                if (!this.opponentFellText) {
                    this.opponentFellText = this.add.text(
                        CONSTS.WIDTH / 2, 
                        CONSTS.HEIGHT / 2 - 100, 
                        'Opponent Fell!',
                        {
                            fontSize: '42px',
                            fill: '#00FF00',
                            fontFamily: 'Arial Black',
                            stroke: '#000000',
                            strokeThickness: 6,
                            align: 'center'
                        }
                    ).setOrigin(0.5).setScrollFactor(0).setDepth(150);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ (—á—Ç–æ–±—ã –∑–Ω–∞—Ç—å —á—Ç–æ –æ–Ω —É–∂–µ –º–µ—Ä—Ç–≤)
                this.opponentData.isAlive = false;
                return; // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º–µ—Ä—Ç–≤–æ–≥–æ ghost
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é ghost —Å–ø—Ä–∞–π—Ç–∞ (—Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π)
            if (this.opponent && this.opponentData.isAlive) {
                console.log('üëª –û–±–Ω–æ–≤–ª—è—é –ø–æ–∑–∏—Ü–∏—é ghost –Ω–∞ X:', data.x, 'Y:', data.y);
                // –ü–ª–∞–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏
                this.tweens.add({
                    targets: this.opponent,
                    x: data.x,
                    y: data.y,
                    duration: 100,
                    ease: 'Linear'
                });
            }
        });
        
        // –û–ø–ø–æ–Ω–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è
        this.socket.on('opponentDisconnected', (data) => {
            console.log('üîå –û–ø–ø–æ–Ω–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', data.message);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ
            const winText = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2, 'Opponent Disconnected!\nYou Win!', {
                fontSize: '42px',
                fill: '#00FF00',
                fontFamily: 'Arial Black',
                stroke: '#000000',
                strokeThickness: 6,
                align: 'center'
            }).setOrigin(0.5).setScrollFactor(0).setDepth(200);
            
            // –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            this.time.delayedCall(3000, () => {
                this.cleanup();
                this.scene.start('MenuScene');
            });
        });
        
        // –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
        this.socket.on('gameEnd', (data) => {
            console.log('üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞:', data);
            this.handleGameEnd(data);
        });
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ update)
    sendPlayerUpdate() {
        if (this.socket && this.gameMode === '1v1') {
            const updateData = {
                x: this.player.x,
                y: this.player.y,
                isAlive: !this.gameOver,
                score: this.score
            };
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', updateData);
            this.socket.emit('playerUpdate', updateData);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è 1v1 –∏–≥—Ä—ã
    handleGameEnd(data) {
        this.gameOver = true;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É
        this.physics.pause();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const resultText = data.winner ? 'You Win!' : 'You Lose!';
        const resultColor = data.winner ? '#00FF00' : '#FF0000';
        
        const resultBg = this.add.graphics();
        resultBg.fillStyle(0x000000, 0.8);
        resultBg.fillRect(0, 0, CONSTS.WIDTH, CONSTS.HEIGHT);
        resultBg.setScrollFactor(0).setDepth(200);
        
        this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 3, resultText, {
            fontSize: '64px',
            fill: resultColor,
            fontFamily: 'Arial Black',
            stroke: '#000000',
            strokeThickness: 8
        }).setOrigin(0.5).setScrollFactor(0).setDepth(201);
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–∫—Ä—É–≥–ª—è–µ–º —Å—á–µ—Ç –¥–æ —Ü–µ–ª—ã—Ö)
        const yourScoreRounded = Math.floor(data.yourScore);
        const opponentScoreRounded = Math.floor(data.opponentScore);
        const statsText = `Your Score: ${yourScoreRounded}\nOpponent: ${opponentScoreRounded}\n\nReason: ${data.reason}`;
        this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2, statsText, {
            fontSize: '28px',
            fill: '#FFFFFF',
            fontFamily: 'Arial',
            align: 'center',
            lineSpacing: 10
        }).setOrigin(0.5).setScrollFactor(0).setDepth(201);
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        const menuButton = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT - 100, 'Return to Menu', {
            fontSize: '32px',
            fill: '#FFFFFF',
            fontFamily: 'Arial',
            backgroundColor: '#0066CC',
            padding: { x: 20, y: 10 }
        }).setOrigin(0.5).setScrollFactor(0).setDepth(201).setInteractive({ useHandCursor: true });
        
        menuButton.on('pointerdown', () => {
            this.cleanup();
            this.scene.start('MenuScene');
        });
    }

    createPlatforms() {
        this.platforms = this.physics.add.staticGroup();

        // –ù–û–í–û–ï: –°–æ–∑–¥–∞—ë–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∑–µ–º–ª—é (–≤–∏–¥–∏–º–∞—è, –∏–≥—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–∞ –Ω–µ–π)
        const groundStartY = CONSTS.HEIGHT - 100; // –í–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞ (–≤–∏–¥–∏–º–∞—è)
        
        // –§–ò–ö–°: –°–æ–∑–¥–∞–µ–º –∑–µ–º–ª—é –∫–∞–∫ –û–¢–î–ï–õ–¨–ù–´–ô —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø—Ä–∞–π—Ç (–Ω–µ –≤ –≥—Ä—É–ø–ø–µ platforms!)
        this.ground = this.physics.add.staticSprite(CONSTS.WIDTH / 2, groundStartY, 'ground');
        this.ground.setScale(CONSTS.WIDTH / this.ground.displayWidth, 2); // –§–ò–ö–°: –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ –∑–µ–º–ª–∏ –≤ 2 —Ä–∞–∑–∞ —á—Ç–æ–±—ã –±—ã–ª–æ —Å–ª–æ–∂–Ω–µ–µ –ø—Ä–æ–º–∞—Ö–Ω—É—Ç—å—Å—è
        this.ground.setAlpha(1); // –ò–ó–ú–ï–ù–ï–ù–û: –í–∏–¥–∏–º–∞—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        this.ground.isGround = true; // –ü–æ–º–µ—Ç–∫–∞: —ç—Ç–æ –∑–µ–º–ª—è, –Ω–µ —Ä–µ—Ü–∏–∫–ª–∏—Ç—å –∏ –Ω–µ smash
        this.ground.isLanded = false;
        this.ground.smashStartTime = null;
        this.ground.initialY = groundStartY; // –ù–û–í–û–ï: –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        this.setupPlatformBody(this.ground); // –§–ò–ö–°: –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        
        console.log('üåç –ó–µ–º–ª—è —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ Y:', groundStartY);

        // –ù–û–í–û–ï: –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ (—á—É—Ç—å –≤—ã—à–µ –∑–µ–º–ª–∏)
        const playerStartY = groundStartY - this.ground.displayHeight / 2 - 50; // 50 - –ø–æ–ª–æ–≤–∏–Ω–∞ –≤—ã—Å–æ—Ç—ã –∏–≥—Ä–æ–∫–∞
        
        // –ù–û–í–û–ï: –û–±—ã—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤—ã—à–µ –∏–≥—Ä–æ–∫–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏)
        // –ü–µ—Ä–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –±–ª–∏–∂–µ –∫ –∑–µ–º–ª–µ (150px), —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ –º–æ–≥ –¥–æ–ø—Ä—ã–≥–Ω—É—Ç—å!
        // –ò–ó–ú–ï–ù–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞—Ä–æ–≤ —Å 12 –¥–æ 25
        for (let i = 1; i <= 25; i++) {
            let gap;
            if (i === 1) {
                gap = 150; // –ü–µ—Ä–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –±–ª–∏–∑–∫–æ - –∏–≥—Ä–æ–∫ —Ç–æ—á–Ω–æ –¥–æ–ø—Ä—ã–≥–Ω–µ—Ç —Å –∑–µ–º–ª–∏
            } else if (i === 2) {
                gap = 150 + 200; // –í—Ç–æ—Ä–∞—è –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 200 –æ—Ç –ø–µ—Ä–≤–æ–π
            } else {
                gap = 150 + 200 + ((i - 2) * CONSTS.PLATFORM_GAP); // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å –æ–±—ã—á–Ω—ã–º —à–∞–≥–æ–º
            }
            const platformY = playerStartY - gap;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º seeded RNG –¥–ª—è X –ø–æ–∑–∏—Ü–∏–∏ –≤ 1v1 —Ä–µ–∂–∏–º–µ
            const platformX = this.gameMode === '1v1' && this.seededRandom
                ? this.seededRandom.intRange(100, CONSTS.WIDTH - 100)
                : Phaser.Math.Between(100, CONSTS.WIDTH - 100);
            
            // –°—Ç—Ä–æ–∫–∞ 526 (–≤ createPlatforms)
            let platform = this.platforms.create(platformX, platformY, 'platform');
            //platform.setScale(0.1);
            platform.isLanded = false;
            platform.smashStartTime = null;
            
            // –ù–û–í–û–ï: –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            platform.platformType = this.choosePlatformType();
            
            // –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –¥–≤–∏–∂—É—â–∏—Ö—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
            if (platform.platformType === 'moving') {
                platform.initialX = platform.x;
                platform.moveSpeed = CONSTS.MOVING_PLATFORM_SPEED;
                platform.moveRange = CONSTS.MOVING_PLATFORM_RANGE;
                platform.moveDirection = 1; // 1 = –≤–ø—Ä–∞–≤–æ, -1 = –≤–ª–µ–≤–æ
            }
            
            // –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –Ω–µ–ª–æ–ø–∞—é—â–∏—Ö—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º (—Å–∏–Ω–∏–π —Ü–≤–µ—Ç)
            if (platform.platformType === 'unbreakable') {
                platform.setTexture('balloon_unbreakable');
            }
            
            this.setupPlatformBody(platform); // –§–ò–ö–°: –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            console.log('üéà –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞', i, '—Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ Y:', platformY, 'gap:', gap, '—Ç–∏–ø:', platform.platformType);
        }
        
        console.log('üéà –°–æ–∑–¥–∞–Ω–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º (–≤—Å–µ–≥–æ):', this.platforms.children.entries.length);

        // –ò–ó–ú–ï–ù–ï–ù–û: –ö—ç—à–∏—Ä—É–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –∑–µ–º–ª–∏ –¥–ª—è –∫–∞–º–µ—Ä—ã –∏ score (–Ω–µ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
        this.groundBottom = this.ground.y + (this.ground.displayHeight / 2); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 64.5 (–ª–æ–≥: Ground bottom: 64.5)
        // –ù–∞–ø—Ä–∏–º–µ—Ä, 50px, –µ—Å–ª–∏ height=100
        console.log('Ground bottom cached:', this.groundBottom);
        console.log('Ground Y:', this.ground.y, 'Ground Height:', this.ground.displayHeight); // –î–ª—è –¥–µ–±–∞–≥–∞ (—É–±–µ—Ä–∏ –ø–æ—Ç–æ–º)
    }

    createKeys() {
        this.aKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);
        this.dKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);
        this.rKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.R);
        this.escKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.ESC); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏—à—É ESC
        this.wKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏—à—É W –¥–ª—è –ø—Ä—ã–∂–∫–∞
        
        // –ù–û–í–û–ï: –°–µ–Ω—Å–æ—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.setupTouchControls();
    }

    // –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–Ω—Å–æ—Ä–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    setupTouchControls() {
        // –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞—Å–∞–Ω–∏–π
        this.touchLeft = false;
        this.touchRight = false;
        this.touchJump = false;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –∑–æ–Ω—ã –¥–ª—è –∫–∞—Å–∞–Ω–∏–π (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        const debugTouch = false; // –£—Å—Ç–∞–Ω–æ–≤–∏ true –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–æ–Ω –∫–∞—Å–∞–Ω–∏—è
        
        // –õ–µ–≤–∞—è –∑–æ–Ω–∞ (1/3 —ç–∫—Ä–∞–Ω–∞ —Å–ª–µ–≤–∞) - –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ
        const leftZone = this.add.rectangle(0, 0, CONSTS.WIDTH / 3, CONSTS.HEIGHT, debugTouch ? 0xff0000 : 0x000000, debugTouch ? 0.2 : 0)
            .setOrigin(0, 0)
            .setScrollFactor(0)
            .setDepth(90)
            .setInteractive();
        
        // –ü—Ä–∞–≤–∞—è –∑–æ–Ω–∞ (1/3 —ç–∫—Ä–∞–Ω–∞ —Å–ø—Ä–∞–≤–∞) - –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ
        const rightZone = this.add.rectangle(CONSTS.WIDTH * 2/3, 0, CONSTS.WIDTH / 3, CONSTS.HEIGHT, debugTouch ? 0x0000ff : 0x000000, debugTouch ? 0.2 : 0)
            .setOrigin(0, 0)
            .setScrollFactor(0)
            .setDepth(90)
            .setInteractive();
        
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ (1/3 —ç–∫—Ä–∞–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ) - –ø—Ä—ã–∂–æ–∫
        const jumpZone = this.add.rectangle(CONSTS.WIDTH / 3, 0, CONSTS.WIDTH / 3, CONSTS.HEIGHT, debugTouch ? 0x00ff00 : 0x000000, debugTouch ? 0.2 : 0)
            .setOrigin(0, 0)
            .setScrollFactor(0)
            .setDepth(90)
            .setInteractive();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–µ–≤–æ–π –∑–æ–Ω—ã
        leftZone.on('pointerdown', () => {
            this.touchLeft = true;
            console.log('üëà Touch LEFT start');
        });
        leftZone.on('pointerup', () => {
            this.touchLeft = false;
            console.log('üëà Touch LEFT end');
        });
        leftZone.on('pointerout', () => {
            this.touchLeft = false;
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∞–≤–æ–π –∑–æ–Ω—ã
        rightZone.on('pointerdown', () => {
            this.touchRight = true;
            console.log('üëâ Touch RIGHT start');
        });
        rightZone.on('pointerup', () => {
            this.touchRight = false;
            console.log('üëâ Touch RIGHT end');
        });
        rightZone.on('pointerout', () => {
            this.touchRight = false;
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã (–ø—Ä—ã–∂–æ–∫)
        jumpZone.on('pointerdown', () => {
            if (!this.touchJump) { // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –∫–∞–∂–¥–æ–µ –∫–∞—Å–∞–Ω–∏–µ
                this.touchJump = true;
                this.handleJump(); // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä—ã–∂–æ–∫
                console.log('‚¨ÜÔ∏è Touch JUMP');
            }
        });
        jumpZone.on('pointerup', () => {
            this.touchJump = false;
        });
        jumpZone.on('pointerout', () => {
            this.touchJump = false;
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–æ–Ω—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        this.touchZones = [leftZone, rightZone, jumpZone];
        
        console.log('üì± –°–µ–Ω—Å–æ—Ä–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!');
    }
    
    // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –∑–æ–Ω (–ø—Ä–∏ Game Over, –ø–∞—É–∑–µ –∏ —Ç.–¥.)
    hideTouchZones() {
        if (this.touchZones && this.touchZones.length > 0) {
            console.log('üóëÔ∏è –£–ù–ò–ß–¢–û–ñ–ê–ï–ú —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –∑–æ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é!');
            this.touchZones.forEach(zone => {
                if (zone && zone.destroy) {
                    zone.removeAllListeners(); // –£–¥–∞–ª—è–µ–º –í–°–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                    zone.destroy(); // –ü–û–õ–ù–û–°–¢–¨–Æ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –æ–±—ä–µ–∫—Ç
                }
            });
            this.touchZones = []; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
            this.touchLeft = false;
            this.touchRight = false;
            this.touchJump = false;
            console.log('‚úÖ –°–µ–Ω—Å–æ—Ä–Ω—ã–µ –∑–æ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã');
        } else {
            console.log('‚ö†Ô∏è –°–µ–Ω—Å–æ—Ä–Ω—ã–µ –∑–æ–Ω—ã —É–∂–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
        }
    }
    
    // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –∑–æ–Ω (–ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ)
    showTouchZones() {
        // –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∑–æ–Ω—ã –∑–∞–Ω–æ–≤–æ –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ä—ã—Ö
        console.log('ÔøΩ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –∑–æ–Ω—ã...');
        this.hideTouchZones(); // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
        this.setupTouchControls(); // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ
    }
    
    // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä—ã–∂–∫–∞ (–≤—ã–Ω–µ—Å–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    handleJump() {
        const standingPlatform = this.getStandingPlatform();
        // –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å clingPlatform, —Ç–æ–ª—å–∫–æ –ø—Ä—ã–∂–æ–∫ —Å–æ —Å—Ç–æ—è—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if (standingPlatform) {
            // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ø—Ä—ã–∂–∫–∞ —Å –Ω–µ–ª–æ–ø–∞—é—â–∏—Ö—Å—è —à–∞—Ä–∏–∫–æ–≤
            if (standingPlatform.platformType === 'unbreakable') {
                console.log('üîµ –ü—Ä—ã–∂–æ–∫ —Å –Ω–µ–ª–æ–ø–∞—é—â–µ–≥–æ—Å—è —à–∞—Ä–∏–∫–∞!');
                this.player.body.setAllowGravity(true);
                this.player.setVelocityY(CONSTS.JUMP_VELOCITY);
                this.player.anims.stop();
                this.player.setTexture('monkey_up'); // –§–ò–ö–°: –°—Ç–∞—Ç–∏—á–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –≤–º–µ—Å—Ç–æ –∞–Ω–∏–º–∞—Ü–∏–∏
                return;
            }
            
            // –ù–û–í–û–ï: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –¥–≤–∏–∂—É—â–∏—Ö—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø—Ä–∏ –ø—Ä—ã–∂–∫–µ
            if (standingPlatform.platformType === 'moving' && !standingPlatform.isLanded) {
                console.log('üü¢ –û—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–≤–∏–∂—É—â–∏–π—Å—è —à–∞—Ä–∏–∫ –ø—Ä–∏ –ø—Ä—ã–∂–∫–µ');
                standingPlatform.isLanded = true;
            }
            
            // –§–ò–ö–°: –°–†–ê–ó–£ —Å—Ç–∞–≤–∏–º smash –ø—Ä–∏ –ø—Ä—ã–∂–∫–µ - —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–ø–∞—é—â–∏—Ö—Å—è!
            if (standingPlatform.isLanded && !standingPlatform.smashStartTime && !standingPlatform.isGround && standingPlatform.platformType !== 'unbreakable') {
                console.log('üéØ –ü—Ä—ã–∂–æ–∫! –°—Ä–∞–∑—É —Å—Ç–∞–≤–∏–º smash, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:', standingPlatform.texture.key);
                standingPlatform.setTexture('balloon_smash');
                standingPlatform.smashStartTime = this.time.now;
            }
            
            this.player.body.setAllowGravity(true);
            this.player.setVelocityY(CONSTS.JUMP_VELOCITY);
            this.player.anims.stop();
            this.player.setTexture('monkey_up'); // –§–ò–ö–°: –°—Ç–∞—Ç–∏—á–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –≤–º–µ—Å—Ç–æ –∞–Ω–∏–º–∞—Ü–∏–∏
        }
    }

    // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    choosePlatformType() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–∂–µ–Ω–Ω—ã–π RNG –≤ 1v1 —Ä–µ–∂–∏–º–µ
        const rand = this.gameMode === '1v1' && this.seededRandom
            ? this.seededRandom.intRange(1, 100)
            : Phaser.Math.Between(1, 100); // –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
        
        if (rand <= CONSTS.PLATFORM_TYPE_NORMAL_PERCENT) {
            return 'normal'; // 1-60: –æ–±—ã—á–Ω—ã–π (60%)
        } else if (rand <= CONSTS.PLATFORM_TYPE_NORMAL_PERCENT + CONSTS.PLATFORM_TYPE_MOVING_PERCENT) {
            return 'moving'; // 61-90: –¥–≤–∏–∂—É—â–∏–π—Å—è (30%)
        } else {
            return 'unbreakable'; // 91-100: –Ω–µ–ª–æ–ø–∞—é—â–∏–π—Å—è (10%)
        }
    }

    // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—á–∫–æ–≤
    getTargetPlatformCount() {
        const displayScore = Math.floor(this.score / CONSTS.SCORE_HEIGHT_INCREMENT) * CONSTS.SCORE_HEIGHT_INCREMENT;
        
        // –î–æ 5000 –æ—á–∫–æ–≤ - –º–∞–∫—Å–∏–º—É–º 25 —à–∞—Ä–æ–≤
        if (displayScore < 5000) {
            return 25;
        }
        
        // –û—Ç 5000 –¥–æ 10000 - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å 25 –¥–æ 12
        if (displayScore < 10000) {
            const progress = (displayScore - 5000) / 5000; // 0.0 –¥–æ 1.0
            const targetCount = Math.floor(25 - (13 * progress)); // 25 -> 12
            return Math.max(12, targetCount); // –ú–∏–Ω–∏–º—É–º 12
        }
        
        // –ü–æ—Å–ª–µ 10000 - –æ—Å—Ç–∞–µ—Ç—Å—è 12 —à–∞—Ä–æ–≤
        return 12;
    }

    handlePlayerPlatformCollision(playerObj, platformObj) {
    const player = playerObj; // –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–¥–µ–Ω–∏—è –Ω–∞ –∑–µ–º–ª—é (touching.down + isGround + groundAppeared)
    if (platformObj.isGround && player.body.touching.down && this.groundAppeared) {
        console.log('üí• GAME OVER: –ò–≥—Ä–æ–∫ –∫–æ—Å–Ω—É–ª—Å—è –∑–µ–º–ª–∏!');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –ø–∞–¥–µ–Ω–∏—è –Ω–∞ –∑–µ–º–ª—é
        this.player.anims.stop();
        this.player.setTexture('monkey_fall_floor');
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        player.setVelocity(0);
        this.isFalling = false;
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å game over
        this.handleGameOverOnGround();
        return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–ª–ª–∏–∑–∏–∏
    }
    if (platformObj.isGround) {
        console.log('Hit ground! Touching down:', player.body.touching.down, 'Velocity Y:', player.body.velocity.y, 'groundAppeared:', this.groundAppeared);
    }
    // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞—Ä–∞ –≥–æ–ª–æ–≤–æ–π (touching.up)
    if (player.body.touching.up) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        this.previousAnimKey = this.player.anims.currentAnim ? this.player.anims.currentAnim.key : null;
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ —Å—Ç–∞–≤–∏–º —Ç–µ–∫—Å—Ç—É—Ä—É —É–¥–∞—Ä–∞
        this.player.anims.stop();
        this.player.setTexture('monkey_dumb');
        // –û—Ç—Ç–∞–ª–∫–∏–≤–∞–µ–º –≤–Ω–∏–∑ (–º–∞–ª–µ–Ω—å–∫–∏–π –æ—Ç—Å–∫–æ–∫)
        player.setVelocityY(100); // –õ—ë–≥–∫–∏–π —Ç–æ–ª—á–æ–∫ –≤–Ω–∏–∑
        // –¢–∞–π–º–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ (0.5 —Å–µ–∫—É–Ω–¥—ã)
        if (this.dumbTimer) {
            this.dumbTimer.remove(); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
        }
        this.dumbTimer = this.time.delayedCall(500, () => {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∏–ª–∏ idle
            if (this.previousAnimKey) {
                this.player.anims.play(this.previousAnimKey); // –§–ò–ö–°: –£–±—Ä–∞–ª–∏ true
            } else {
                this.player.setTexture('playerSprite');
            }
            this.isFalling = false;
            this.previousAnimKey = null;
        });
        return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Å–∞–Ω–∏—è
    }
    // –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä—ã–∂–æ–∫ –ø—Ä–∏ –∫–∞—Å–∞–Ω–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–≤–µ—Ä—Ö—É (—Ç–æ–ª—å–∫–æ –¥–ª—è —à–∞—Ä–∏–∫–æ–≤, –Ω–µ –∑–µ–º–ª–∏)
    // –§–ò–ö–°: –ü—Ä—ã–≥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï —Ç–∞ –∂–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —Å –∫–æ—Ç–æ—Ä–æ–π –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä—ã–≥–Ω—É–ª–∏
    if (player.body.touching.down && !platformObj.isGround && player.body.velocity.y >= 0 && platformObj !== this.lastBouncePlatform) {
        // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ª–æ–ø–∞—é—â–∏—Ö—Å—è —à–∞—Ä–∏–∫–æ–≤
        if (platformObj.platformType === 'unbreakable') {
            console.log('üîµ –ü—Ä—ã–∂–æ–∫ —Å –Ω–µ–ª–æ–ø–∞—é—â–µ–≥–æ—Å—è —à–∞—Ä–∏–∫–∞!');
            player.setVelocityY(CONSTS.JUMP_VELOCITY); // –ü—Ä—ã–∂–æ–∫ –≤–≤–µ—Ä—Ö
            this.player.anims.stop();
            this.player.setTexture('monkey_up'); // –§–ò–ö–°: –°—Ç–∞—Ç–∏—á–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞
            this.isJumping = true;
            // –ù–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤ lastBouncePlatform - –º–æ–∂–Ω–æ –ø—Ä—ã–≥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ!
            // –ù–µ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏ –Ω–µ —Å—Ç–∞–≤–∏–º isLanded
            return;
        }
        
        // –ù–û–í–û–ï: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –¥–≤–∏–∂—É—â–∏—Ö—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º –ø—Ä–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–∏
        if (platformObj.platformType === 'moving' && !platformObj.isLanded) {
            console.log('üü¢ –û—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–≤–∏–∂—É—â–∏–π—Å—è —à–∞—Ä–∏–∫ –ø—Ä–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–∏');
            platformObj.isLanded = true; // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –ø—Ä–∏–∑–µ–º–ª–∏–ª–∏—Å—å - –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
        }
        
        // –§–ò–ö–°: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isLanded –î–û –ø—Ä—ã–∂–∫–∞ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
        if (!platformObj.isLanded) {
            platformObj.setTexture('balloon_under_player');
            platformObj.isLanded = true;
        }
        
        // –§–ò–ö–°: –°–†–ê–ó–£ —Å—Ç–∞–≤–∏–º smash –ø—Ä–∏ –ø—Ä—ã–∂–∫–µ (–Ω–µ –∂–¥—ë–º update())
        if (!platformObj.smashStartTime) {
            console.log('üéØ –ê–≤—Ç–æ–ø—Ä—ã–∂–æ–∫! –°—Ä–∞–∑—É —Å—Ç–∞–≤–∏–º smash, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:', platformObj.texture.key);
            platformObj.setTexture('balloon_smash');
            platformObj.smashStartTime = this.time.now;
        }
        
        player.setVelocityY(CONSTS.JUMP_VELOCITY); // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—Ä—ã–∂–æ–∫ –≤–≤–µ—Ä—Ö
        this.player.anims.stop();
        this.player.setTexture('monkey_up'); // –§–ò–ö–°: –°—Ç–∞—Ç–∏—á–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –≤–º–µ—Å—Ç–æ –∞–Ω–∏–º–∞—Ü–∏–∏
        this.isJumping = true; // –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä—ã–∂–∫–∞
        this.lastBouncePlatform = platformObj; // –§–ò–ö–°: –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —ç—Ç—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —á—Ç–æ–±—ã –Ω–µ –ø—Ä—ã–≥–∞—Ç—å —Å –Ω–µ—ë –ø–æ–≤—Ç–æ—Ä–Ω–æ
        return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Å–∞–Ω–∏—è –≤ —ç—Ç–æ–º –∫–∞–¥—Ä–µ
    }
    // –£–ë–†–ê–ù–û: –õ–æ–≥–∏–∫–∞ –∑–∞—Ü–µ–ø–ª–µ–Ω–∏—è –∑–∞ –±–æ–∫–∞ —à–∞—Ä–∏–∫–æ–≤ (left/right) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞
}

    // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–µ–º–ª–∏ –ø–æ—Å–ª–µ 2 —Å–µ–∫—É–Ω–¥ –ø–∞–¥–µ–Ω–∏—è
    makeGroundAppear() {
        if (this.groundAppeared || !this.ground) return;
        
        console.log('üåç –ó–µ–º–ª—è –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤–Ω–∏–∑! (–ø—Ä–æ—à–ª–æ 2 —Å–µ–∫—É–Ω–¥—ã –ø–∞–¥–µ–Ω–∏—è)');
        this.groundAppeared = true;
        
        // –ù–û–í–û–ï: –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∑–µ–º–ª—é –Ω–∏–∂–µ –∏–≥—Ä–æ–∫–∞ (–Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ ~0.7 —Å–µ–∫—É–Ω–¥—ã –ø–∞–¥–µ–Ω–∏—è)
        const fallDistance = CONSTS.GRAVITY * 0.7; // –§–ò–ö–°: –£–º–µ–Ω—å—à–µ–Ω–æ —Å 1.5 –¥–æ 0.7 - –∑–µ–º–ª—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è –±–ª–∏–∂–µ —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ —É—Å–ø–µ–ª –¥–æ –Ω–µ—ë –¥–æ–ª–µ—Ç–µ—Ç—å
        const newGroundY = this.player.y + fallDistance;
        
        this.ground.y = newGroundY;
        this.ground.refreshBody(); // –§–ò–ö–°: –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∑–∏–∫—É –¢–û–õ–¨–ö–û –∑–µ–º–ª–∏ (–Ω–µ –≤—Å–µ–π –≥—Ä—É–ø–ø—ã platforms!)
        this.groundBottom = this.ground.y + (this.ground.displayHeight / 2);
        
        console.log('üåç –ó–µ–º–ª—è —Ç–µ–ø–µ—Ä—å –Ω–∞ Y:', newGroundY, '–ò–≥—Ä–æ–∫ –Ω–∞ Y:', this.player.y);
    }

    // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ game over –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –Ω–∞ –∑–µ–º–ª—é
    handleGameOverOnGround() {
        console.log('üí• –û–±–µ–∑—å—è–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ –∑–µ–º–ª—é!');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É
        this.physics.pause();
        this.gameOver = true;
        
        // ==================== 1V1 MODE: –ù–ï –ü–û–ö–ê–ó–´–í–ê–ï–ú GAME OVER ====================
        // –í 1v1 —Ä–µ–∂–∏–º–µ –∂–¥–µ–º —Å–æ–±—ã—Ç–∏—è gameEnd –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if (this.gameMode === '1v1') {
            console.log('üíÄ 1v1 —Ä–µ–∂–∏–º: –æ—Ç–ø—Ä–∞–≤–ª—è—é isAlive=false —Å–µ—Ä–≤–µ—Ä—É');
            // –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á—Ç–æ –º—ã –º–µ—Ä—Ç–≤—ã
            if (this.socket) {
                this.socket.emit('playerUpdate', {
                    x: this.player.x,
                    y: this.player.y,
                    isAlive: false,
                    score: this.score
                });
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "You Fell"
            this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2, 'You Fell!\nWaiting for result...', {
                fontSize: '42px',
                fill: '#FF0000',
                fontFamily: 'Arial Black',
                stroke: '#000000',
                strokeThickness: 6,
                align: 'center'
            }).setOrigin(0.5).setScrollFactor(0).setDepth(200);
            
            return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π Game Over
        }
        
        // SOLO —Ä–µ–∂–∏–º: –æ–±—ã—á–Ω—ã–π Game Over
        // –ù–û–í–û–ï: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —ç–∫—Ä–∞–Ω–∞ Game Over (–¥–∞—ë–º –≤—Ä–µ–º—è —É–≤–∏–¥–µ—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø–∞–¥–µ–Ω–∏—è)
        this.time.delayedCall(1000, () => {
            this.showGameOverScreen();
        });
    }

    // –ù–û–í–û–ï: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ Game Over
    showGameOverScreen() {
        console.log('üíÄ Game Over! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω...');
        
        // –§–ò–ö–°: –ö–†–ò–¢–ò–ß–ù–û - –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –∑–æ–Ω—ã –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º UI
        this.hideTouchZones();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (this.physics && this.physics.world) {
            this.physics.pause();
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Å—á–µ—Ç—ã
        retryPendingScores();

        // –ù–û–í–û–ï: –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞–Ω–∞–Ω—ã –∑–∞ —Å–µ—Å—Å–∏—é
        let bananas = parseInt(localStorage.getItem('bananas')) || 0;
        const earnedBananas = Math.floor(this.score / 100); // –ß–µ–º –≤—ã—à–µ —Å—á—ë—Ç, —Ç–µ–º –±–æ–ª—å—à–µ
        bananas += earnedBananas;
        localStorage.setItem('bananas', bananas);

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ª—É—á—à–∏–π —Å—á—ë—Ç (–¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ)
        let highScores = JSON.parse(localStorage.getItem('highScores')) || [];
        const previousBest = highScores.length > 0 ? highScores[0] : 0;
        const isNewRecord = this.score > previousBest;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ—Ä–¥
        highScores.push(this.score);
        highScores.sort((a, b) => b - a); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        highScores = highScores.slice(0, 10); // –¢–æ–ª—å–∫–æ —Ç–æ–ø-10
        localStorage.setItem('highScores', JSON.stringify(highScores));
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª—É—á—à–∏–π —Å—á—ë—Ç (–ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
        const currentBest = highScores[0];

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—á—ë—Ç (–æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ SCORE_HEIGHT_INCREMENT)
        const displayScore = Math.floor(this.score / CONSTS.SCORE_HEIGHT_INCREMENT) * CONSTS.SCORE_HEIGHT_INCREMENT;
        const displayBest = Math.floor(currentBest / CONSTS.SCORE_HEIGHT_INCREMENT) * CONSTS.SCORE_HEIGHT_INCREMENT;

        // –§–æ–Ω –¥–ª—è Game Over
        const gameOverBg = this.add.graphics();
        gameOverBg.fillStyle(0x000000, 0.8);
        gameOverBg.fillRoundedRect(CONSTS.WIDTH / 2 - 180, CONSTS.HEIGHT / 2 - 140, 360, 280, 15);
        gameOverBg.setScrollFactor(0).setDepth(14);

        // –¢–µ–Ω—å
        const shadowGraphics = this.add.graphics();
        shadowGraphics.fillStyle(0x000000, 0.5);
        shadowGraphics.fillRoundedRect(CONSTS.WIDTH / 2 - 175, CONSTS.HEIGHT / 2 - 135, 360, 280, 15);
        shadowGraphics.setScrollFactor(0).setDepth(13);

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ "Game Over!"
        const gameOverText = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - 100, 'Game Over!', { 
            fontSize: '40px', 
            fill: '#FF0000', 
            fontFamily: 'Arial Black', 
            stroke: '#000000', 
            strokeThickness: 4 
        }).setOrigin(0.5).setScrollFactor(0).setDepth(15);

        // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        const serverStatusText = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - 60, 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...', { 
            fontSize: '14px', 
            fill: '#FFFF00', 
            fontFamily: 'Arial' 
        }).setOrigin(0.5).setScrollFactor(0).setDepth(15);

        // NEW RECORD (–µ—Å–ª–∏ –µ—Å—Ç—å)
        let newRecordText = null;
        if (isNewRecord) {
            newRecordText = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - 35, '‚òÖ –ù–û–í–´–ô –†–ï–ö–û–†–î! ‚òÖ', { 
                fontSize: '20px', 
                fill: '#FFD700', 
                fontFamily: 'Arial Black' 
            }).setOrigin(0.5).setScrollFactor(0).setDepth(15);
        }

        // –¢–µ–∫—É—â–∏–π —Å—á—ë—Ç
        const currentScoreText = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - 5, `–°—á—ë—Ç: ${displayScore}`, { 
            fontSize: '28px', 
            fill: '#FFFFFF', 
            fontFamily: 'Arial Black' 
        }).setOrigin(0.5).setScrollFactor(0).setDepth(15);

        // –õ—É—á—à–∏–π —Å—á—ë—Ç
        const bestScoreText = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 + 25, `–õ—É—á—à–∏–π: ${displayBest}`, { 
            fontSize: '20px', 
            fill: '#00FF00', 
            fontFamily: 'Arial' 
        }).setOrigin(0.5).setScrollFactor(0).setDepth(15);

        // –ë–∞–Ω–∞–Ω—ã
        const bananasText = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 + 50, `+${earnedBananas} üçå`, { 
            fontSize: '18px', 
            fill: '#FFA500', 
            fontFamily: 'Arial' 
        }).setOrigin(0.5).setScrollFactor(0).setDepth(15);

        // –ö–Ω–æ–ø–∫–∞ "–†–µ—Å—Ç–∞—Ä—Ç"
        const restartGraphics = this.add.graphics().setDepth(150); // –§–ò–ö–°: –£–≤–µ–ª–∏—á–µ–Ω depth –≤—ã—à–µ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –∑–æ–Ω (90)
        restartGraphics.fillStyle(0x4CAF50, 1);
        restartGraphics.fillRoundedRect(CONSTS.WIDTH / 2 - 140, CONSTS.HEIGHT / 2 + 85, 120, 45, 8);
        restartGraphics.setScrollFactor(0);

        // –§–ò–ö–°: –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∑–æ–Ω—É –ü–û–í–ï–†–• –∫–Ω–æ–ø–∫–∏
        const restartZone = this.add.rectangle(CONSTS.WIDTH / 2 - 80, CONSTS.HEIGHT / 2 + 107, 120, 45, 0x000000, 0)
            .setOrigin(0.5)
            .setScrollFactor(0)
            .setDepth(151) // –§–ò–ö–°: –ï—â–µ –≤—ã—à–µ
            .setInteractive({ useHandCursor: true });
        
        const restartText = this.add.text(CONSTS.WIDTH / 2 - 80, CONSTS.HEIGHT / 2 + 107, '–†–µ—Å—Ç–∞—Ä—Ç', { 
            fontSize: '20px', 
            fill: '#FFF', 
            fontFamily: 'Arial Black' 
        }).setOrigin(0.5).setScrollFactor(0).setDepth(152); // –§–ò–ö–°: –¢–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        
        restartZone.on('pointerdown', () => {
            console.log('üîÑüîÑüîÑ –†–ï–°–¢–ê–†–¢ –ù–ê–ñ–ê–¢! –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É...');
            this.scene.restart();
        });

        // –ö–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é"
        const menuGraphics = this.add.graphics().setDepth(150); // –§–ò–ö–°: –£–≤–µ–ª–∏—á–µ–Ω depth –≤—ã—à–µ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –∑–æ–Ω (90)
        menuGraphics.fillStyle(0x2196F3, 1);
        menuGraphics.fillRoundedRect(CONSTS.WIDTH / 2 + 20, CONSTS.HEIGHT / 2 + 85, 120, 45, 8);
        menuGraphics.setScrollFactor(0);

        // –§–ò–ö–°: –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—É—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∑–æ–Ω—É –ü–û–í–ï–†–• –∫–Ω–æ–ø–∫–∏
        const menuZone = this.add.rectangle(CONSTS.WIDTH / 2 + 80, CONSTS.HEIGHT / 2 + 107, 120, 45, 0x000000, 0)
            .setOrigin(0.5)
            .setScrollFactor(0)
            .setDepth(151) // –§–ò–ö–°: –ï—â–µ –≤—ã—à–µ
            .setInteractive({ useHandCursor: true });
        
        const menuText = this.add.text(CONSTS.WIDTH / 2 + 80, CONSTS.HEIGHT / 2 + 107, '–ú–µ–Ω—é', { 
            fontSize: '20px', 
            fill: '#FFF', 
            fontFamily: 'Arial Black' 
        }).setOrigin(0.5).setScrollFactor(0).setDepth(152); // –§–ò–ö–°: –¢–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        
        menuZone.on('pointerdown', () => {
            console.log('üîôüîôüîô –ú–ï–ù–Æ –ù–ê–ñ–ê–¢–û! –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é...');
            // –§–ò–ö–°: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º GameScene –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º MenuScene (–≤–∞–∂–Ω–æ –¥–ª—è Telegram!)
            this.scene.stop('GameScene');
            this.scene.start('MenuScene');
        });

        // –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ê–°–ò–ù–•–†–û–ù–ù–û (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç UI)
        const userData = getTelegramUserId();
        saveScoreToServer(userData.id, userData.username, this.score)
            .then(serverResult => {
                if (serverResult.success) {
                    serverStatusText.setText('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
                    serverStatusText.setColor('#00FF00');
                    if (serverResult.isNewRecord) {
                        serverStatusText.setText('‚úÖ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!');
                    }
                } else {
                    serverStatusText.setText('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ');
                    serverStatusText.setColor('#FFA500');
                }
            })
            .catch(err => {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err);
                serverStatusText.setText('‚ùå –û—à–∏–±–∫–∞');
                serverStatusText.setColor('#FF0000');
            });
    }

    getStandingPlatform() {
        // –§–ò–ö–°: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–µ–º–ª—é (–æ–Ω–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ platforms)
        if (this.ground && this.ground.body) {
            const playerBottom = this.player.body.bottom;
            const groundTop = this.ground.body.top;
            if (Math.abs(playerBottom - groundTop) < 5 && this.player.body.right > this.ground.body.left && this.player.body.left < this.ground.body.right) {
                return this.ground;
            }
        }
        
        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        return this.platforms.children.entries.find(platform => {
            const playerBottom = this.player.body.bottom;
            const platformTop = platform.body.top;
            return Math.abs(playerBottom - platformTop) < 5 && this.player.body.right > platform.body.left && this.player.body.left < platform.body.right;
        });
    }

    update() {
    // –§–ò–ö–°: –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º update –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Telegram!)
    if (!this.scene.isActive('GameScene')) {
        return;
    }
    if (this.gameOver) {
        return;
    }
    if (this.pausedForConfirm) {
        return;
    }
    
    // ==================== 1V1 MODE: SEND PLAYER UPDATES ====================
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 100ms
    if (this.gameMode === '1v1') {
        if (!this.lastUpdateTime) {
            this.lastUpdateTime = 0;
        }
        
        const now = this.time.now;
        if (now - this.lastUpdateTime >= 100) {
            this.sendPlayerUpdate();
            this.lastUpdateTime = now;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–º–µ–Ω–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        this.updateOpponentNamePosition();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
        if (this.gameStartTime && this.timerText) {
            const elapsed = now - this.gameStartTime;
            const remaining = Math.max(0, this.gameDuration - elapsed);
            const minutes = Math.floor(remaining / 60000);
            const seconds = Math.floor((remaining % 60000) / 1000);
            this.timerText.setText(`${minutes}:${seconds.toString().padStart(2, '0')}`);
            
            // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 —Å–µ–∫—É–Ω–¥–∞—Ö
            if (remaining <= 30000) {
                this.timerText.setFill('#FF0000');
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        if (this.opponentScoreText) {
            this.opponentScoreText.setText(`Opponent: ${Math.floor(this.opponentData.score)}`);
        }
    }
    
    const standingPlatform = this.getStandingPlatform();
    if (!standingPlatform && this.player.body.velocity.y > 0 && !this.rocketActive) {
        // –ù–û–í–û–ï: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–∞–¥–µ–Ω–∏—è
        if (!this.isFalling) {
            this.fallStartTime = this.time.now; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–∞–¥–µ–Ω–∏—è
        }
        this.isFalling = true;
        
        // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–∞–¥–∞–µ–º –ª–∏ –º—ã —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (–±–æ–ª—å—à–µ 2 —Å–µ–∫—É–Ω–¥)
        if (this.fallStartTime && this.time.now - this.fallStartTime >= this.maxFallDuration && !this.groundAppeared) {
            console.log('‚è∞ –ü–∞–¥–∞–ª–∏ 2 —Å–µ–∫—É–Ω–¥—ã! –ó–µ–º–ª—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è!');
            this.makeGroundAppear(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–µ–º–ª—é
        }
    } else if (standingPlatform || this.player.body.velocity.y <= 0) {
        this.isFalling = false;
        this.fallStartTime = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–∞–¥–µ–Ω–∏—è
    }
    
    // –§–ò–ö–°: –ü—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–æ–ª–µ—Ç–µ–ª –º–∏–º–æ –∑–µ–º–ª–∏ (–Ω–∏–∂–µ –Ω–∞ 200px) - game over
    if (this.groundAppeared && this.player.y > this.groundBottom + 200 && !this.gameOver) {
        console.log('üí• –ü—Ä–æ–ª–µ—Ç–µ–ª –º–∏–º–æ –∑–µ–º–ª–∏! Game Over!');
        this.isFalling = true;
        this.handleGameOverOnGround();
        return;
    }
    
    if (Phaser.Input.Keyboard.JustDown(this.escKey)) {
        this.showConfirmExit();
        return;
    }
    
    // –§–ò–ö–°: –°–±—Ä–∞—Å—ã–≤–∞–µ–º isJumping –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –¥–æ—Å—Ç–∏–≥ –∞–ø–æ–≥–µ—è –∏ –Ω–∞—á–∞–ª –ø–∞–¥–∞—Ç—å
    // –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –ø—Ä—ã–∂–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è (–¥–∞–∂–µ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–æ—Å–∫–æ–ª—å–∑–Ω—É–ª —Å –∫—Ä–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
    if (this.isJumping && this.player.body.velocity.y > 50 && !this.rocketActive) {
        console.log('üîÑ –ü—Ä—ã–∂–æ–∫ –∑–∞–∫–æ–Ω—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–∞–¥–µ–Ω–∏–µ (velocity.y > 50)');
        this.isJumping = false;
    }
    
    // –ù–û–í–û–ï: –õ–æ–≥–∏–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π —Å —É—á—ë—Ç–æ–º isJumping
    if (!this.dumbTimer || !this.dumbTimer.isRunning) {
        const standingPlatform = this.getStandingPlatform();
        const isFalling = !standingPlatform && this.player.body.velocity.y > 0 && !this.rocketActive && !this.isJumping;
        const isRising = !standingPlatform && this.player.body.velocity.y < 0 && !this.rocketActive && !this.isJumping;
        
        // –§–ò–ö–°: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –≤–º–µ—Å—Ç–æ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥–∂–∏—Ç—Ç–µ—Ä–∞
        if (isFalling) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –ø–∞–¥–µ–Ω–∏—è
            if (this.player.texture.key !== 'monkey_down_1') {
                this.player.anims.stop();
                this.player.setTexture('monkey_down_1');
            }
        } else if (isRising) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É –ø–æ–¥—ä–µ–º–∞
            if (this.player.texture.key !== 'monkey_up') {
                this.player.anims.stop();
                this.player.setTexture('monkey_up');
            }
        } else if (standingPlatform && !this.isJumping) { // –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ !this.isJumping
            if (this.player.texture.key !== 'playerSprite') {
                this.player.anims.stop();
                this.player.setTexture('playerSprite');
            }
            this.isJumping = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º isJumping –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
        }
    }
    this.checkMovement();
    this.checkJump();
    this.updateMovingPlatforms(); // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –¥–≤–∏–∂—É—â–∏–µ—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    this.refactorPlatforms();
    this.checkGameOver();
    // –£–ë–†–ê–ù–û: –õ–æ–≥–∏–∫–∞ –∑–∞—Ü–µ–ø–ª–µ–Ω–∏—è –∑–∞ –±–æ–∫–∞ (clingPlatform) –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞
    if (Phaser.Input.Keyboard.JustDown(this.rKey) && this.rockets > 0 && !this.rocketActive) {
        this.rocketActive = true;
        this.rockets -= 1;
        localStorage.setItem('rockets', this.rockets);
        this.physics.world.removeCollider(this.collider);
        this.player.body.setAllowGravity(false);
        const rocketSpeed = - (500 * CONSTS.SCORE_HEIGHT_INCREMENT) / (2000 / 1000);
        this.player.setVelocityY(rocketSpeed);
        this.player.anims.stop();
        this.player.setTexture('monkey_up'); // –§–ò–ö–°: –°—Ç–∞—Ç–∏—á–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∫–µ—Ç—ã
        this.time.delayedCall(2000, () => {
            this.rocketActive = false;
            this.player.setVelocityY(CONSTS.JUMP_VELOCITY / 2);
            this.player.body.setAllowGravity(true);
            this.collider = this.physics.add.collider(this.player, this.platforms, this.handlePlayerPlatformCollision, null, this);
            const overlappedPlatform = this.platforms.children.entries.find(platform => this.physics.overlap(this.player, platform));
            if (overlappedPlatform) {
                this.player.y = overlappedPlatform.y - (overlappedPlatform.displayHeight / 2) - (this.player.displayHeight / 2) - 1;
                this.player.setVelocityY(0);
            }
            this.refactorPlatforms();
        });
    }
    const currentStanding = this.getStandingPlatform();
    // –£–ë–†–ê–ù–û: currentCling —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ null (–∑–∞—Ü–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
    const wasOnPlatform = this.previousStandingPlatform;
    const nowOnPlatform = currentStanding;
    if (wasOnPlatform && !nowOnPlatform) {
        let jumpedPlatform = this.previousStandingPlatform;
        // –ò–ó–ú–ï–ù–ï–ù–û: –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º smash –∫ –Ω–µ–ª–æ–ø–∞—é—â–∏–º—Å—è —à–∞—Ä–∏–∫–∞–º!
        if (jumpedPlatform && jumpedPlatform.isLanded && !jumpedPlatform.smashStartTime && !jumpedPlatform.isGround && jumpedPlatform.platformType !== 'unbreakable') {
            console.log('üéØ [FALLBACK] –ü—Ä—ã–≥–Ω—É–ª–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, —Å—Ç–∞–≤–∏–º smash, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:', jumpedPlatform.texture.key);
            jumpedPlatform.setTexture('balloon_smash');
            jumpedPlatform.smashStartTime = this.time.now;
        }
    }
    // –ò–ó–ú–ï–ù–ï–ù–û: –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isLanded –¥–ª—è –Ω–µ–ª–æ–ø–∞—é—â–∏—Ö—Å—è —à–∞—Ä–∏–∫–æ–≤!
    if (currentStanding && !currentStanding.isLanded && !currentStanding.isGround && this.player.body.velocity.y >= 0 && currentStanding.platformType !== 'unbreakable') {
        currentStanding.setTexture('balloon_under_player');
        currentStanding.isLanded = true;
    }
    this.platforms.children.entries.forEach(platform => {
        // –ò–ó–ú–ï–ù–ï–ù–û: –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º dead –∫ –Ω–µ–ª–æ–ø–∞—é—â–∏–º—Å—è —à–∞—Ä–∏–∫–∞–º!
        if (platform.smashStartTime && this.time.now - platform.smashStartTime >= CONSTS.BALLOON_SMASH_DURATION && platform.texture.key !== 'balloon_dead' && !platform.isGround && platform.platformType !== 'unbreakable') {
            console.log('üíÄ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å—Ç–∞–ª–∞ dead:', platform.x, platform.y);
            platform.setTexture('balloon_dead');
            platform.deadStartTime = this.time.now; // –ù–û–í–û–ï: –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è —Å–º–µ—Ä—Ç–∏
            
            // –§–ò–ö–°: –û–¢–ö–õ–Æ–ß–ê–ï–ú –∫–æ–ª–ª–∏–∑–∏—é –¥–ª—è –≤–∑–æ—Ä–≤–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–∏–∫–∞!
            platform.body.checkCollision.none = true; // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–∏–∑–∏–∏
            platform.setAlpha(0.5); // –ù–û–í–û–ï: –î–µ–ª–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        }
    });
    this.previousStandingPlatform = currentStanding;
    // –£–ë–†–ê–ù–û: previousClingPlatform –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    
    const camera = this.cameras.main;
    
    // –§–ò–ö–°: –ö–∞–º–µ—Ä–∞ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –∏–≥—Ä–æ–∫–æ–º –ø–æ X —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≥—Ä–∞–Ω–∏—Ü
    const desiredScrollX = this.player.x - (CONSTS.WIDTH / 2);
    const minScrollX = 0; // –ù–µ —É—Ö–æ–¥–∏—Ç—å –ª–µ–≤–µ–µ –Ω–∞—á–∞–ª–∞ –º–∏—Ä–∞
    const maxScrollX = 0; // –ù–µ —É—Ö–æ–¥–∏—Ç—å –ø—Ä–∞–≤–µ–µ (–º–∏—Ä —à–∏—Ä–∏–Ω–æ–π 640px)
    const targetScrollX = Phaser.Math.Clamp(desiredScrollX, minScrollX, maxScrollX);
    
    // –§–ò–ö–°: –ü–õ–ê–í–ù–û–ï –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ X (lerp 0.05 –≤–º–µ—Å—Ç–æ 0.1 ‚Äî –±–æ–ª–µ–µ –º—è–≥–∫–æ)
    camera.scrollX = Phaser.Math.Linear(camera.scrollX, targetScrollX, 0.05);
    
    // –§–ò–ö–°: –ö–∞–º–µ—Ä–∞ —Å–ª–µ–¥—É–µ—Ç –∑–∞ –∏–≥—Ä–æ–∫–æ–º –ø–æ Y (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏)
    const desiredScrollY = this.player.y - (CONSTS.HEIGHT / 2);
    const maxScrollY = this.groundBottom - CONSTS.HEIGHT;
    
    // –§–ò–ö–°: –ö–∞–º–µ—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —É—Ö–æ–¥–∏—Ç—å –Ω–∏–∂–µ –∑–µ–º–ª–∏ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–Ω–∏–∑—É —Ç–æ–∂–µ)
    const minScrollY = -Infinity; // –ú–æ–∂–Ω–æ —É—Ö–æ–¥–∏—Ç—å –≤–≤–µ—Ä—Ö –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    const targetScrollY = Phaser.Math.Clamp(desiredScrollY, minScrollY, maxScrollY);
    
    // –§–ò–ö–°: –ï–©–ï –ë–û–õ–ï–ï –ü–õ–ê–í–ù–û–ï –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã (lerp 0.12 –¥–ª—è Y ‚Äî –±—ã—Å—Ç—Ä–µ–µ —Å–ª–µ–¥–∏—Ç –∑–∞ –ø—Ä—ã–∂–∫–æ–º)
    camera.scrollY = Phaser.Math.Linear(camera.scrollY, targetScrollY, 0.12);
    
    // –§–ò–ö–°: –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä!
    this.updateScore();
    
    // –§–ò–ö–°: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä—ã–∂–∫–∞ –∫–æ–≥–¥–∞ –æ–±–µ–∑—å—è–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–∞–¥–∞—Ç—å –≤–Ω–∏–∑
    if (this.isJumping && this.player.body.velocity.y > 0) {
        this.isJumping = false;
    }
    
    // –§–ò–ö–°: –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastBouncePlatform –∫–æ–≥–¥–∞ –æ–±–µ–∑—å—è–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–æ–∑–¥—É—Ö–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ
    if (!standingPlatform && this.player.body.velocity.y > 100) {
        this.lastBouncePlatform = null;
    }
}

    checkMovement() {
        const { player, aKey, dKey } = this;
        
        // –ù–û–í–û–ï: –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–µ–Ω—Å–æ—Ä–Ω—ã–π –≤–≤–æ–¥
        const isMovingLeft = aKey.isDown || this.touchLeft;
        const isMovingRight = dKey.isDown || this.touchRight;
        
        // –§–ò–ö–°: –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–∑–∫–æ–≥–æ setVelocityX
        const targetVelocityX = isMovingLeft && !isMovingRight ? -CONSTS.MOVE_VELOCITY :
                               isMovingRight && !isMovingLeft ? CONSTS.MOVE_VELOCITY :
                               0;
        
        // –§–ò–ö–°: –ü—Ä–∏–º–µ–Ω—è–µ–º lerp –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —É—Å–∫–æ—Ä–µ–Ω–∏—è/–∑–∞–º–µ–¥–ª–µ–Ω–∏—è
        const currentVelocityX = player.body.velocity.x;
        const newVelocityX = Phaser.Math.Linear(currentVelocityX, targetVelocityX, 0.3);
        player.setVelocityX(newVelocityX);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–π—Ç–∞
        if (targetVelocityX < 0) {
            player.flipX = true;
        } else if (targetVelocityX > 0) {
            player.flipX = false;
        }
    }

    // –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
    updateMovingPlatforms() {
        let anyPlatformMoved = false; // –§–ò–ö–°: –§–ª–∞–≥ - –¥–≤–∏–≥–∞–ª–∞—Å—å –ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
        
        this.platforms.children.entries.forEach(platform => {
            // –î–≤–∏–≥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Ç–∏–ø–∞ 'moving', –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–∑–µ–º–ª–∏–ª–∏—Å—å
            if (platform.platformType === 'moving' && !platform.isLanded) {
                // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                const newX = platform.x + (platform.moveSpeed * platform.moveDirection * (1/60));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–≤–∏–∂–µ–Ω–∏—è
                const leftBound = platform.initialX - platform.moveRange / 2;
                const rightBound = platform.initialX + platform.moveRange / 2;
                
                if (newX <= leftBound) {
                    // –î–æ—Å—Ç–∏–≥–ª–∏ –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã - –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    platform.x = leftBound;
                    platform.moveDirection = 1; // –ú–µ–Ω—è–µ–º –Ω–∞ –≤–ø—Ä–∞–≤–æ
                    anyPlatformMoved = true;
                } else if (newX >= rightBound) {
                    // –î–æ—Å—Ç–∏–≥–ª–∏ –ø—Ä–∞–≤–æ–π –≥—Ä–∞–Ω–∏—Ü—ã - –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    platform.x = rightBound;
                    platform.moveDirection = -1; // –ú–µ–Ω—è–µ–º –Ω–∞ –≤–ª–µ–≤–æ
                    anyPlatformMoved = true;
                } else {
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
                    platform.x = newX;
                    anyPlatformMoved = true;
                }
            }
        });
        
        // –§–ò–ö–°: –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Ç–µ–ª–æ –û–î–ò–ù –†–ê–ó –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º (–Ω–µ –≤ —Ü–∏–∫–ª–µ!)
        if (anyPlatformMoved) {
            this.platforms.refresh();
        }
    }

    checkJump() {
        // –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä—ã–∂–æ–∫ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏—à—É W (—Å–µ–Ω—Å–æ—Ä–Ω—ã–π –ø—Ä—ã–∂–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ setupTouchControls)
        if (Phaser.Input.Keyboard.JustDown(this.wKey)) {
            this.handleJump();
        }
    }

    refactorPlatforms() {
        this.minPlatformY = Math.min(...this.platforms.children.entries.map(p => p.y));
        
        // –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—á–∫–æ–≤
        const targetPlatformCount = this.getTargetPlatformCount();
        const activePlatforms = this.platforms.children.entries.filter(p => !p.isGround);
        const currentPlatformCount = activePlatforms.length;
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
        let platformsToRecycle = [];
        
        this.platforms.children.entries.forEach(platform => {
            // –§–ò–ö–°: –†–µ—Ü–∏–∫–ª–∏–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –µ—Å–ª–∏ –æ–Ω–∞ –¥–∞–ª–µ–∫–æ –≤–Ω–∏–∑—É –ò–õ–ò –µ—Å–ª–∏ –æ–Ω–∞ "–º–µ—Ä—Ç–≤–∞—è" (balloon_dead) –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ
            const isFarBehind = platform.y > this.player.y && Phaser.Math.Distance.Between(this.player.body.center.x, this.player.body.center.y, platform.body.center.x, platform.body.center.y) > CONSTS.RECYCLE_DISTANCE;
            const isDead = platform.texture.key === 'balloon_dead';
            const isDeadLongEnough = isDead && platform.deadStartTime && this.time.now - platform.deadStartTime >= 1500; // –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º dead 1.5 —Å–µ–∫—É–Ω–¥—ã
            
            // –ù–û–í–û–ï: –ï—Å–ª–∏ –∑–µ–º–ª—è –ø–æ—è–≤–∏–ª–∞—Å—å –∏ –∏–≥—Ä–æ–∫ –ø–∞–¥–∞–µ—Ç –≤–Ω–∏–∑ - —Ä–µ—Ü–∏–∫–ª–∏–º –í–°–ï –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤—ã—à–µ –∏–≥—Ä–æ–∫–∞ (–≤–∫–ª—é—á–∞—è —Å–∏–Ω–∏–µ!)
            const isAbovePlayerWhenFalling = this.groundAppeared && platform.y < this.player.y - 300; // –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤—ã—à–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ 300px –∫–æ–≥–¥–∞ –∑–µ–º–ª—è –ø–æ—è–≤–∏–ª–∞—Å—å
            
            if ((isFarBehind || isDeadLongEnough || isAbovePlayerWhenFalling) && !platform.isGround) { // –§–ò–ö–°: –†–µ—Ü–∏–∫–ª–∏–º dead —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫
                platformsToRecycle.push(platform);
            }
        });
        
        // –ù–û–í–û–ï: –ï—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º –±–æ–ª—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ, —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ (–Ω–µ –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º)
        if (currentPlatformCount > targetPlatformCount) {
            const excessCount = currentPlatformCount - targetPlatformCount;
            let removed = 0;
            
            // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ –¥–∞–ª—å–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            const sortedByDistance = [...platformsToRecycle].sort((a, b) => {
                const distA = Phaser.Math.Distance.Between(this.player.body.center.x, this.player.body.center.y, a.body.center.x, a.body.center.y);
                const distB = Phaser.Math.Distance.Between(this.player.body.center.x, this.player.body.center.y, b.body.center.x, b.body.center.y);
                return distB - distA; // –û—Ç –¥–∞–ª—å–Ω–∏—Ö –∫ –±–ª–∏–∂–Ω–∏–º
            });
            
            for (let i = 0; i < sortedByDistance.length && removed < excessCount; i++) {
                const platform = sortedByDistance[i];
                console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω—é—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)');
                platform.destroy();
                platformsToRecycle = platformsToRecycle.filter(p => p !== platform);
                removed++;
            }
        }
        
        // –ü–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        platformsToRecycle.forEach(platform => {
            console.log('‚ôªÔ∏è –†–µ—Ü–∏–∫–ª–∏–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:', '—Ç–µ–∫—Å—Ç—É—Ä–∞:', platform.texture.key);
            
            // –§–ò–ö–°: –ï—Å–ª–∏ –∑–µ–º–ª—è –ø–æ—è–≤–∏–ª–∞—Å—å - –ø—Ä–æ—Å—Ç–æ –ø—Ä—è—á–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–∞–ª–µ–∫–æ –∑–∞ —ç–∫—Ä–∞–Ω–æ–º (–Ω–µ —Ä–µ—Ü–∏–∫–ª–∏–º!)
            if (this.groundAppeared) {
                platform.y = -10000; // –ü—Ä—è—á–µ–º –¥–∞–ª–µ–∫–æ –∑–∞ —ç–∫—Ä–∞–Ω–æ–º
                platform.setAlpha(0); // –î–µ–ª–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–º
                platform.body.checkCollision.none = true; // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–∏–∑–∏—é
                console.log('üôà –ü—Ä—è—á–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Ç.–∫. –∑–µ–º–ª—è –ø–æ—è–≤–∏–ª–∞—Å—å');
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–µ—Ü–∏–∫–ª–∞
            }
            
            // –ù–û–í–û–ï: –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            platform.platformType = this.choosePlatformType();
            
            // –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if (platform.platformType === 'unbreakable') {
                platform.setTexture('balloon_unbreakable');
            } else {
                platform.setTexture('platform'); // normal –∏ moving –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–±—ã—á–Ω—É—é –∑–µ–ª–µ–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
            }
            
            platform.isLanded = false;
            platform.smashStartTime = null;
            platform.deadStartTime = null; // –ù–û–í–û–ï: –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ—Ä—Ç–∏
            
            // –§–ò–ö–°: –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –∫–æ–ª–ª–∏–∑–∏—é –ø—Ä–∏ —Ä–µ—Ü–∏–∫–ª–µ!
            platform.body.checkCollision.none = false; // –í–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ
            platform.setAlpha(1); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            
            platform.x = Phaser.Math.Between(0, CONSTS.WIDTH);
            const randomGap = Phaser.Math.Between(200, 280);
            
            // –§–ò–ö–°: –ï—Å–ª–∏ –∑–µ–º–ª—è –ø–æ—è–≤–∏–ª–∞—Å—å - —Ä–∞–∑–º–µ—â–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –í–´–®–ï –∏–≥—Ä–æ–∫–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º minPlatformY!)
            if (this.groundAppeared) {
                // –†–∞–∑–º–µ—â–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤—ã—à–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏
                platform.y = this.player.y - 800 - Phaser.Math.Between(0, 400); // –í—ã—à–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ 800-1200px
            } else {
                // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º minPlatformY
                platform.y = this.minPlatformY - randomGap;
            }
            
            // –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –¥–≤–∏–∂—É—â–∏—Ö—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
            if (platform.platformType === 'moving') {
                platform.initialX = platform.x;
                platform.moveSpeed = CONSTS.MOVING_PLATFORM_SPEED;
                platform.moveRange = CONSTS.MOVING_PLATFORM_RANGE;
                platform.moveDirection = 1; // 1 = –≤–ø—Ä–∞–≤–æ, -1 = –≤–ª–µ–≤–æ
            }
            
            this.setupPlatformBody(platform); // –§–ò–ö–°: –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤–∫–ª—é—á–∞–µ—Ç refreshBody + setCircle + collisions)
            this.minPlatformY = Math.min(this.minPlatformY, platform.y);
            console.log('‚ôªÔ∏è –ù–æ–≤—ã–π —Ç–∏–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:', platform.platformType);
        });
    }

    checkGameOver() {
        // Fallback —É–¥–∞–ª—ë–Ω: game over —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–µ–º–ª–µ —Å impact –≤ handlePlayerPlatformCollision.
        // –£–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ player.body.y > gameOverDistance, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∞–Ω–Ω–µ–π —Å–º–µ—Ä—Ç–∏ –≤ –≤–æ–∑–¥—É—Ö–µ.
        // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ fallback –¥–ª—è "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è" (—Ä–µ–¥–∫–æ), –¥–æ–±–∞–≤—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≥—Ä–∞–Ω–∏—Ü—É –Ω–∏–∂–µ –∑–µ–º–ª–∏,
        // –Ω–∞–ø—Ä–∏–º–µ—Ä: if (this.player.y > this.groundBottom + 100) { ... }
    }

    showConfirmExit() {
        // –§–ò–ö–°: –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –∑–æ–Ω—ã –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—Ö–æ–¥–∞
        this.hideTouchZones();
        
        this.physics.pause();
        this.pausedForConfirm = true;

        // –§–æ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const confirmBg = this.add.graphics();
        confirmBg.fillStyle(0x000000, 0.7);
        confirmBg.fillRoundedRect(CONSTS.WIDTH / 2 - 200, CONSTS.HEIGHT / 2 - 100, 400, 200, 15);
        confirmBg.setScrollFactor(0).setDepth(14).setAlpha(0).setScale(0).setVisible(false);
        this.confirmElements.push(confirmBg);

        // –¢–µ–Ω—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        const shadowGraphics = this.add.graphics();
        shadowGraphics.fillStyle(0x000000, 0.5);
        shadowGraphics.fillRoundedRect(CONSTS.WIDTH / 2 - 195, CONSTS.HEIGHT / 2 - 95, 400, 200, 15);
        shadowGraphics.setScrollFactor(0).setDepth(13).setAlpha(0).setScale(0).setVisible(false);
        this.confirmElements.push(shadowGraphics);

        // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        const confirmText = this.add.text(CONSTS.WIDTH / 2, CONSTS.HEIGHT / 2 - 50, '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?', { fontSize: '32px', fill: '#FFFFFF', fontFamily: 'Arial Black', stroke: '#000000', strokeThickness: 4, align: 'center' }).setOrigin(0.5).setScrollFactor(0).setDepth(15).setAlpha(0).setScale(0).setVisible(false);
        this.confirmElements.push(confirmText);

        // –ö–Ω–æ–ø–∫–∞ "–î–∞"
        const yesGraphics = this.add.graphics().setDepth(15);
        yesGraphics.fillStyle(0xFFFFFF, 1);
        yesGraphics.fillRoundedRect(CONSTS.WIDTH / 2 - 150, CONSTS.HEIGHT / 2 + 20, 120, 50, 10);
        yesGraphics.setScrollFactor(0).setAlpha(0).setScale(0).setVisible(false);
        this.confirmElements.push(yesGraphics);

        const yesText = this.add.text(CONSTS.WIDTH / 2 - 90, CONSTS.HEIGHT / 2 + 45, '–î–∞', { fontSize: '24px', fill: '#000', fontFamily: 'Arial' }).setOrigin(0.5).setInteractive({ useHandCursor: true }).setScrollFactor(0).setDepth(16).setAlpha(0).setScale(0).setVisible(false);
        this.confirmElements.push(yesText);
        yesText.on('pointerdown', () => {
            console.log('üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ ESC...');
            // –§–ò–ö–°: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º GameScene –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º MenuScene (–≤–∞–∂–Ω–æ –¥–ª—è Telegram!)
            this.scene.stop('GameScene');
            this.scene.start('MenuScene');
        });

        // –ö–Ω–æ–ø–∫–∞ "–ù–µ—Ç"
        const noGraphics = this.add.graphics().setDepth(15);
        noGraphics.fillStyle(0xFFFFFF, 1);
        noGraphics.fillRoundedRect(CONSTS.WIDTH / 2 + 30, CONSTS.HEIGHT / 2 + 20, 120, 50, 10);
        noGraphics.setScrollFactor(0).setAlpha(0).setScale(0).setVisible(false);
        this.confirmElements.push(noGraphics);

        const noText = this.add.text(CONSTS.WIDTH / 2 + 90, CONSTS.HEIGHT / 2 + 45, '–ù–µ—Ç', { fontSize: '24px', fill: '#000', fontFamily: 'Arial' }).setOrigin(0.5).setInteractive({ useHandCursor: true }).setScrollFactor(0).setDepth(16).setAlpha(0).setScale(0).setVisible(false);
        this.confirmElements.push(noText);
        noText.on('pointerdown', () => {
            this.hideConfirmExit();
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        this.tweens.add({
            targets: [confirmBg, shadowGraphics, yesGraphics, noGraphics],
            scale: { from: 0, to: 1 },
            alpha: { from: 0, to: 1 },
            duration: 800,
            ease: 'Power2',
            onStart: () => {
                [confirmBg, shadowGraphics, yesGraphics, noGraphics].forEach(target => target.setVisible(true));
            }
        });

        this.tweens.add({
            targets: [confirmText, yesText, noText],
            scale: { from: 0, to: 1 },
            alpha: { from: 0, to: 1 },
            duration: 800,
            delay: 400, // –ó–∞–¥–µ—Ä–∂–∫–∞ 200 –º—Å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            ease: 'Power2',
            onStart: () => {
                [confirmText, yesText, noText].forEach(target => target.setVisible(true));
            }
        });
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
    hideConfirmExit() {
        this.confirmElements.forEach(element => {
            element.destroy();
        });
        this.confirmElements = [];
        this.physics.resume();
        this.pausedForConfirm = false;
        
        // –§–ò–ö–°: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –∑–æ–Ω—ã –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã
        this.showTouchZones();
    }

    updateScore() {
        // –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–¥–Ω—è–ª—Å—è –≤—ã—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞
        if (this.player.y < this.maxReachedY) {
            this.maxReachedY = this.player.y;
            console.log('üéØ –ù–æ–≤–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! maxReachedY:', this.maxReachedY);
        }
        
        // –ò–ó–ú–ï–ù–ï–ù–û: Height —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç maxReachedY (–Ω–µ –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏)
        // –û—á–∫–∏ —Ä–∞—Å—Ç—É—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤—ã—à–µ —Å–≤–æ–µ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞
        const currentHeight = Math.max(0, this.playerStartY - this.maxReachedY);
        this.heightScore = Math.max(this.heightScore, currentHeight);
        this.score = this.heightScore + this.killScore;
        this.scoreText.setText(`Score: ${Math.floor(this.score / CONSTS.SCORE_HEIGHT_INCREMENT) * CONSTS.SCORE_HEIGHT_INCREMENT}`);
    }

    handleResize() {
        // –§–ò–ö–°: –ü—Ä–∏ RESIZE —Ä–µ–∂–∏–º–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–º–µ—Ä—ã –ø–æ–¥ –Ω–æ–≤—ã–π viewport
        const { width, height } = this.scale;
        const camera = this.cameras.main;
        camera.setSize(width, height);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω –ø–æ–¥ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
        if (this.background) {
            this.background.setDisplaySize(width, height);
        }
        
        console.log('üìê Resize:', width, 'x', height);
    }

    // –§–ò–ö–°: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å—Ü–µ–Ω—ã (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Telegram!)
    cleanup() {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ GameScene –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –º–µ–Ω—é...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
        if (this.dumbTimer) {
            this.dumbTimer.remove();
            this.dumbTimer = null;
        }
        
        // –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –∑–æ–Ω—ã
        if (this.touchZones) {
            this.touchZones.forEach(zone => {
                if (zone && zone.destroy) {
                    zone.destroy();
                }
            });
            this.touchZones = null;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∫–∞—Å–∞–Ω–∏–π
        this.touchLeft = false;
        this.touchRight = false;
        this.touchJump = false;
        
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if (this.input && this.input.keyboard) {
            this.input.keyboard.removeAllListeners();
        }
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç resize
        this.scale.off('resize', this.handleResize, this);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É
        if (this.physics && this.physics.world) {
            this.physics.pause();
        }
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä—ã
        if (this.collider) {
            this.collider.destroy();
            this.collider = null;
        }
        if (this.groundCollider) {
            this.groundCollider.destroy();
            this.groundCollider = null;
        }
        
        // –û—á–∏—â–∞–µ–º confirmElements
        if (this.confirmElements && this.confirmElements.length > 0) {
            this.confirmElements.forEach(element => {
                if (element && element.destroy) {
                    element.destroy();
                }
            });
            this.confirmElements = [];
        }
        
        console.log('‚úÖ GameScene –æ—á–∏—â–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    }
}

// –ö–æ–Ω—Ñ–∏–≥ Phaser
const config = {
    type: Phaser.WEBGL,
    width: CONSTS.WIDTH,
    height: CONSTS.HEIGHT,
    parent: 'game-container', // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è canvas
    scale: {
        mode: Phaser.Scale.FIT, // –§–ò–ö–°: FIT —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç
        autoCenter: Phaser.Scale.CENTER_BOTH, // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
        width: CONSTS.WIDTH,
        height: CONSTS.HEIGHT
    },
    // –§–ò–ö–°: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª—è —á–µ—Ç–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    render: {
        antialias: true, // –í–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
        pixelArt: false, // –ù–µ –ø–∏–∫—Å–µ–ª—å-–∞—Ä—Ç (–¥–ª—è –ø–ª–∞–≤–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤)
        roundPixels: false, // –§–ò–ö–°: –û–¢–ö–õ–Æ–ß–ê–ï–ú –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ ‚Äî –ø—Ä–∏—á–∏–Ω–∞ –¥–µ—Ä–≥–∞–Ω—å—è!
        powerPreference: 'high-performance' // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å GPU
    },
    physics: {
        default: 'arcade',
        arcade: {
            gravity: { y: CONSTS.GRAVITY },
            debug: CONSTS.DEBUG_PHYSICS
            // –§–ò–ö–°: –£–±—Ä–∞–ª–∏ fps –∏ fixedStep –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ 120Hz –¥–∏—Å–ø–ª–µ–µ–≤
            // –§–∏–∑–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —á–∞—Å—Ç–æ—Ç–µ –¥–∏—Å–ø–ª–µ—è (60/120/144 Hz)
        },
    },
    scene: [MenuScene, MatchmakingScene, GameScene]
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const game = new Phaser.Game(config);